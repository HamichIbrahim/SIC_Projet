{"ast":null,"code":"var _jsxFileName = \"D:\\\\sic\\\\sic_front\\\\src\\\\component\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './chatroom.css';\nimport './ViewerPopup.css'; // Import the CSS for the viewer popup\nimport ViewerPopup from './popup'; // Import the viewer popup component\n\nimport profileImage from './profile.png';\nimport seenIcon from './double-check.png'; // Add a suitable seen icon image for seen messages\nimport multipleSeenIcon from './icons8-select-24.png'; // Add a suitable icon for multiple viewers\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoom = ({\n  onLogout,\n  onLeave\n}) => {\n  _s();\n  var _selectedRoom2;\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [unseenMessageIds, setUnseenMessageIds] = useState([]);\n  const [viewers, setViewers] = useState({});\n  const [showViewerPopup, setShowViewerPopup] = useState(null);\n  const chatAreaRef = useRef(null);\n  const endOfMessagesRef = useRef(null); // A ref to track the bottom of the messages\n  const token = localStorage.getItem('token');\n  const scrollToBottom = () => {\n    if (endOfMessagesRef.current) {\n      endOfMessagesRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  };\n  const scrollToUnseenMessage = unseenMessages => {\n    if (unseenMessages.length > 0) {\n      const firstUnseenMessageId = unseenMessages[0].id;\n      const unseenMessageElement = document.getElementById(`message-${firstUnseenMessageId}`);\n      if (unseenMessageElement) {\n        unseenMessageElement.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center'\n        });\n      }\n    }\n  };\n  const fetchMessages = async () => {\n    try {\n      const response = await axios.get(`http://localhost:8080/message/${selectedRoom.id}`, {\n        headers: {\n          Authorization: `Bearer ${token}` // Include the token in the header\n        }\n      });\n      setMessages(response.data);\n      const unseenResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/unseenMessages`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const unseenMessages = unseenResponse.data;\n      if (unseenMessages.length > 0) {\n        setUnseenMessageIds(unseenMessages.map(msg => msg.id));\n        await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`, unseenMessages.map(msg => msg.id), {\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}` // Include the token in the header\n          }\n        });\n        scrollToUnseenMessage(unseenMessages);\n      }\n\n      // Fetch viewers for each message\n      response.data.forEach(async msg => {\n        const viewersResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${msg.id}/${currentUser.id}/viewers`, {\n          headers: {\n            Authorization: `Bearer ${token}` // Include the token in the header\n          }\n        });\n        setViewers(prevViewers => ({\n          ...prevViewers,\n          [msg.id]: viewersResponse.data\n        }));\n      });\n\n      // Scroll to bottom after initial fetch\n      scrollToBottom();\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n  const markMessageAsSeen = async messageId => {\n    try {\n      await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`, [messageId], {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}` // Include the token in the header\n        }\n      });\n    } catch (error) {\n      console.error('Error marking message as seen:', error);\n    }\n  };\n\n  // Set up the SSE connection for real-time updates\n  useEffect(() => {\n    var _selectedRoom;\n    let hasFetchedUnseenMessages = false; // Flag to prevent fetching multiple times\n    const handleMouseMove = async () => {\n      if (!hasFetchedUnseenMessages) {\n        try {\n          // Fetch unseen messages\n          const unseenResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/unseenMessages`, {\n            headers: {\n              Authorization: `Bearer ${token}` // Include the token in the header\n            }\n          });\n          const unseenMessages = unseenResponse.data;\n          if (unseenMessages.length > 0) {\n            setUnseenMessageIds(unseenMessages.map(msg => msg.id));\n\n            // Mark unseen messages as seen\n            await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`, unseenMessages.map(msg => msg.id), {\n              headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${token}` // Include the token in the header\n              }\n            });\n            scrollToUnseenMessage(unseenMessages);\n          }\n        } catch (error) {\n          console.error(\"Error fetching unseen messages:\", error);\n        }\n        hasFetchedUnseenMessages = true;\n      }\n    };\n    if ((_selectedRoom = selectedRoom) !== null && _selectedRoom !== void 0 && _selectedRoom.id) {\n      fetchMessages(); // Fetch initial messages when the room is selected\n\n      // Set up SSE connection\n      const eventSource = new EventSource(`http://localhost:8080/message/sse/room/${selectedRoom.id}`, {\n        headers: {\n          Authorization: `Bearer ${token}` // Include the token in the header for SSE\n        }\n      });\n      eventSource.onopen = () => {\n        console.log(\"Connection to server opened.\");\n      };\n      eventSource.onmessage = event => {\n        const data = JSON.parse(event.data);\n        if (data.message) {\n          markMessageAsSeen(data.id);\n          setMessages(prevMessages => [...prevMessages, data]);\n          scrollToBottom();\n        } else {\n          // Handle viewer update\n          console.log(data);\n          setViewers(prevViewers => ({\n            ...prevViewers,\n            [data.messageId]: data.viewers\n          }));\n        }\n      };\n\n      // Add mousemove listener\n      document.addEventListener('mousemove', handleMouseMove);\n      return () => {\n        eventSource.close(); // Close the connection when component unmounts\n        document.removeEventListener('mousemove', handleMouseMove); // Clean up listener on unmount\n      };\n    }\n  }, [(_selectedRoom2 = selectedRoom) === null || _selectedRoom2 === void 0 ? void 0 : _selectedRoom2.id]);\n  const sendMessage = async e => {\n    e.preventDefault();\n    if (message.trim()) {\n      const newMessage = {\n        message: message,\n        user: {\n          id: currentUser.id,\n          username: currentUser.username\n        },\n        room: {\n          id: selectedRoom.id,\n          label: selectedRoom.label\n        }\n      };\n      try {\n        await axios.post('http://localhost:8080/message', newMessage, {\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}` // Include the token in the header\n          }\n        });\n        setMessage(''); // Clear input after sending\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n    }\n  };\n  const toggleViewerPopup = messageId => {\n    if (showViewerPopup === messageId) {\n      setShowViewerPopup(null); // Hide viewer list\n    } else {\n      setShowViewerPopup(messageId); // Show viewer list\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatroom-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"navbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: profileImage,\n          alt: \"Avatar\",\n          className: \"avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"navbar-user\",\n        children: [\" \", currentUser.username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"leave-room-btn\",\n        onClick: onLeave,\n        children: \"Leave Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-area\",\n      ref: chatAreaRef,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: selectedRoom.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-list\",\n        children: [messages.map(msg => {\n          var _msg$user, _currentUser, _viewers$msg$id, _viewers$msg$id2;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            id: `message-${msg.id}`,\n            className: `message ${((_msg$user = msg.user) === null || _msg$user === void 0 ? void 0 : _msg$user.id) === ((_currentUser = currentUser) === null || _currentUser === void 0 ? void 0 : _currentUser.id) ? 'sent' : 'received'}`,\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: profileImage,\n              alt: \"Avatar\",\n              className: \"avatar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [msg.user ? msg.user.username : 'Unknown User', \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 5\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 5\n              }, this), msg.message || '', /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-date\",\n                children: new Date(msg.date).toLocaleString('en-GB', {\n                  year: 'numeric',\n                  month: '2-digit',\n                  day: '2-digit',\n                  hour: '2-digit',\n                  minute: '2-digit',\n                  second: '2-digit'\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 5\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 9\n            }, this), msg.user.id === currentUser.id && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-viewers\",\n              onClick: () => toggleViewerPopup(msg.id),\n              children: [((_viewers$msg$id = viewers[msg.id]) === null || _viewers$msg$id === void 0 ? void 0 : _viewers$msg$id.length) > 0 ? /*#__PURE__*/_jsxDEV(\"img\", {\n                src: seenIcon,\n                alt: \"Seen\",\n                className: \"viewer-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n                src: multipleSeenIcon,\n                alt: \"Multiple Viewers\",\n                className: \"viewer-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"viewers-count\",\n                children: ((_viewers$msg$id2 = viewers[msg.id]) === null || _viewers$msg$id2 === void 0 ? void 0 : _viewers$msg$id2.length) || 0\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 13\n            }, this)]\n          }, msg.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 5\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: endOfMessagesRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }, this), showViewerPopup && viewers[showViewerPopup] && /*#__PURE__*/_jsxDEV(ViewerPopup, {\n      viewers: viewers[showViewerPopup],\n      onClose: () => setShowViewerPopup(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      className: \"message-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        placeholder: \"Type a message...\",\n        className: \"message-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"send-btn\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatRoom, \"T/jiVps4+PRD7+JP8CEdPgzfK98=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","ViewerPopup","profileImage","seenIcon","multipleSeenIcon","jsxDEV","_jsxDEV","ChatRoom","onLogout","onLeave","_s","_selectedRoom2","message","setMessage","messages","setMessages","unseenMessageIds","setUnseenMessageIds","viewers","setViewers","showViewerPopup","setShowViewerPopup","chatAreaRef","endOfMessagesRef","token","localStorage","getItem","scrollToBottom","current","scrollIntoView","behavior","scrollToUnseenMessage","unseenMessages","length","firstUnseenMessageId","id","unseenMessageElement","document","getElementById","block","fetchMessages","response","get","selectedRoom","headers","Authorization","data","unseenResponse","currentUser","map","msg","post","forEach","viewersResponse","prevViewers","error","console","markMessageAsSeen","messageId","_selectedRoom","hasFetchedUnseenMessages","handleMouseMove","eventSource","EventSource","onopen","log","onmessage","event","JSON","parse","prevMessages","addEventListener","close","removeEventListener","sendMessage","e","preventDefault","trim","newMessage","user","username","room","label","toggleViewerPopup","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","_msg$user","_currentUser","_viewers$msg$id","_viewers$msg$id2","Date","date","toLocaleString","year","month","day","hour","minute","second","onClose","onSubmit","type","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["D:/sic/sic_front/src/component/ChatRoom.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport './chatroom.css';\r\nimport './ViewerPopup.css'; // Import the CSS for the viewer popup\r\nimport ViewerPopup from './popup'; // Import the viewer popup component\r\n\r\nimport profileImage from './profile.png';\r\nimport seenIcon from './double-check.png'; // Add a suitable seen icon image for seen messages\r\nimport multipleSeenIcon from './icons8-select-24.png'; // Add a suitable icon for multiple viewers\r\n\r\nconst ChatRoom = ({onLogout, onLeave}) => {\r\n    const [message, setMessage] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    const [unseenMessageIds, setUnseenMessageIds] = useState([]);\r\n    const [viewers, setViewers] = useState({});\r\n    const [showViewerPopup, setShowViewerPopup] = useState(null);\r\n    const chatAreaRef = useRef(null);\r\n    const endOfMessagesRef = useRef(null); // A ref to track the bottom of the messages\r\n    const token = localStorage.getItem('token');\r\n    const scrollToBottom = () => {\r\n        if (endOfMessagesRef.current) {\r\n            endOfMessagesRef.current.scrollIntoView({ behavior: 'smooth' });\r\n        }\r\n    };\r\n\r\n    const scrollToUnseenMessage = (unseenMessages) => {\r\n        if (unseenMessages.length > 0) {\r\n            const firstUnseenMessageId = unseenMessages[0].id;\r\n            const unseenMessageElement = document.getElementById(`message-${firstUnseenMessageId}`);\r\n            if (unseenMessageElement) {\r\n                unseenMessageElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n            }\r\n        }\r\n    };\r\n\r\n    const fetchMessages = async () => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:8080/message/${selectedRoom.id}`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`, // Include the token in the header\r\n                },\r\n            });\r\n            setMessages(response.data);\r\n\r\n            const unseenResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/unseenMessages`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            });\r\n            const unseenMessages = unseenResponse.data;\r\n\r\n            if (unseenMessages.length > 0) {\r\n                setUnseenMessageIds(unseenMessages.map(msg => msg.id));\r\n                await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`, unseenMessages.map(msg => msg.id), {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        Authorization: `Bearer ${token}`, // Include the token in the header\r\n                    },\r\n                });\r\n                scrollToUnseenMessage(unseenMessages);\r\n            }\r\n\r\n            // Fetch viewers for each message\r\n            response.data.forEach(async (msg) => {\r\n                const viewersResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${msg.id}/${currentUser.id}/viewers`, {\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`, // Include the token in the header\r\n                    },\r\n                });\r\n                setViewers(prevViewers => ({\r\n                    ...prevViewers,\r\n                    [msg.id]: viewersResponse.data\r\n                }));\r\n            });\r\n\r\n            // Scroll to bottom after initial fetch\r\n            scrollToBottom();\r\n        } catch (error) {\r\n            console.error('Error fetching messages:', error);\r\n        }\r\n    };\r\n\r\n    const markMessageAsSeen = async (messageId) => {\r\n        try {\r\n            await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`, [messageId], {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${token}`, // Include the token in the header\r\n                },\r\n            });\r\n        } catch (error) {\r\n            console.error('Error marking message as seen:', error);\r\n        }\r\n    };\r\n\r\n    // Set up the SSE connection for real-time updates\r\n    useEffect(() => {\r\n        let hasFetchedUnseenMessages = false; // Flag to prevent fetching multiple times\r\n        const handleMouseMove = async () => {\r\n            if (!hasFetchedUnseenMessages) {\r\n                try {\r\n                    // Fetch unseen messages\r\n                    const unseenResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/unseenMessages`, {\r\n                        headers: {\r\n                            Authorization: `Bearer ${token}`, // Include the token in the header\r\n                        },\r\n                    });\r\n                    const unseenMessages = unseenResponse.data;\r\n                    if (unseenMessages.length > 0) {\r\n                        setUnseenMessageIds(unseenMessages.map((msg) => msg.id));\r\n\r\n                        // Mark unseen messages as seen\r\n                        await axios.post(\r\n                            `http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`,\r\n                            unseenMessages.map((msg) => msg.id),\r\n                            {\r\n                                headers: {\r\n                                    'Content-Type': 'application/json',\r\n                                    Authorization: `Bearer ${token}`, // Include the token in the header\r\n                                },\r\n                            }\r\n                        );\r\n                        scrollToUnseenMessage(unseenMessages);\r\n                    }\r\n                } catch (error) {\r\n                    console.error(\"Error fetching unseen messages:\", error);\r\n                }\r\n\r\n                hasFetchedUnseenMessages = true;\r\n            }\r\n        };\r\n\r\n        if (selectedRoom?.id) {\r\n            fetchMessages(); // Fetch initial messages when the room is selected\r\n\r\n            // Set up SSE connection\r\n            const eventSource = new EventSource(`http://localhost:8080/message/sse/room/${selectedRoom.id}`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`, // Include the token in the header for SSE\r\n                },\r\n            });\r\n            eventSource.onopen = () => {\r\n                console.log(\"Connection to server opened.\");\r\n            };\r\n\r\n            eventSource.onmessage = (event) => {\r\n                const data = JSON.parse(event.data);\r\n                if (data.message) {\r\n                    markMessageAsSeen(data.id);\r\n                    setMessages((prevMessages) => [...prevMessages, data]);\r\n                    scrollToBottom();\r\n                } else {\r\n                    // Handle viewer update\r\n                    console.log(data);\r\n                    setViewers((prevViewers) => ({\r\n                        ...prevViewers,\r\n                        [data.messageId]: data.viewers,\r\n                    }));\r\n                }\r\n            };\r\n\r\n            // Add mousemove listener\r\n            document.addEventListener('mousemove', handleMouseMove);\r\n\r\n            return () => {\r\n                eventSource.close(); // Close the connection when component unmounts\r\n                document.removeEventListener('mousemove', handleMouseMove); // Clean up listener on unmount\r\n            };\r\n        }\r\n    }, [selectedRoom?.id]);\r\n\r\n    const sendMessage = async (e) => {\r\n        e.preventDefault();\r\n        if (message.trim()) {\r\n            const newMessage = {\r\n                message: message,\r\n                user: { id: currentUser.id, username: currentUser.username },\r\n                room: { id: selectedRoom.id, label: selectedRoom.label }\r\n            };\r\n\r\n            try {\r\n                await axios.post('http://localhost:8080/message', newMessage, {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        Authorization: `Bearer ${token}`, // Include the token in the header\r\n                    },\r\n                });\r\n                setMessage(''); // Clear input after sending\r\n            } catch (error) {\r\n                console.error('Error sending message:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const toggleViewerPopup = (messageId) => {\r\n        if (showViewerPopup === messageId) {\r\n            setShowViewerPopup(null); // Hide viewer list\r\n        } else {\r\n            setShowViewerPopup(messageId); // Show viewer list\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chatroom-container\">\r\n            <nav className=\"navbar\">\r\n                <span>\r\n                    <img src={profileImage} alt=\"Avatar\" className=\"avatar\" />\r\n                </span>\r\n                <span className=\"navbar-user\"> {currentUser.username}</span>\r\n                <button className=\"leave-room-btn\" onClick={onLeave}>Leave Room</button>\r\n            </nav>\r\n\r\n            <div className=\"chat-area\" ref={chatAreaRef}>\r\n                <h3>{selectedRoom.label}</h3>\r\n                <div className=\"message-list\">\r\n                {messages.map((msg) => (\r\n    <div key={msg.id} id={`message-${msg.id}`} className={`message ${msg.user?.id === currentUser?.id ? 'sent' : 'received'}`}>\r\n        <img src={profileImage} alt=\"Avatar\" className=\"avatar\" />\r\n        <div className=\"message-content\">\r\n    <strong>{msg.user ? msg.user.username : 'Unknown User'}:</strong>\r\n    <br />\r\n    {msg.message || ''}\r\n    <div className=\"message-date\">\r\n        {new Date(msg.date).toLocaleString('en-GB', {\r\n            year: 'numeric',\r\n            month: '2-digit',\r\n            day: '2-digit',\r\n            hour: '2-digit',\r\n            minute: '2-digit',\r\n            second: '2-digit',\r\n        })}\r\n    </div>\r\n</div>\r\n\r\n        {msg.user.id === currentUser.id && (\r\n            <div className=\"message-viewers\" onClick={() => toggleViewerPopup(msg.id)}>\r\n                {viewers[msg.id]?.length >0 ? (\r\n                    <img src={seenIcon} alt=\"Seen\" className=\"viewer-icon\" />\r\n                ) : (\r\n                    <img src={multipleSeenIcon} alt=\"Multiple Viewers\" className=\"viewer-icon\" />\r\n                )}\r\n                <span className=\"viewers-count\">{viewers[msg.id]?.length || 0}</span>\r\n            </div>\r\n        )}\r\n    </div>\r\n))}\r\n                    <div ref={endOfMessagesRef} />\r\n                </div>\r\n            </div>\r\n\r\n            {showViewerPopup && viewers[showViewerPopup] && (\r\n                <ViewerPopup viewers={viewers[showViewerPopup]} onClose={() => setShowViewerPopup(null)} />\r\n            )}\r\n\r\n            <form onSubmit={sendMessage} className=\"message-form\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={message}\r\n                    onChange={(e) => setMessage(e.target.value)}\r\n                    placeholder=\"Type a message...\"\r\n                    className=\"message-input\"\r\n                />\r\n                <button type=\"submit\" className=\"send-btn\">Send</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}