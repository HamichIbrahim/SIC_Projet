{"ast":null,"code":"var _jsxFileName = \"D:\\\\sic\\\\sic_front\\\\src\\\\component\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './chatroom.css';\nimport './ViewerPopup.css'; // Import the CSS for the viewer popup\nimport ViewerPopup from './popup'; // Import the viewer popup component\n\nimport profileImage from './profile.png';\nimport seenIcon from './double-check.png'; // Add a suitable seen icon image for seen messages\nimport multipleSeenIcon from './icons8-select-24.png'; // Add a suitable icon for multiple viewers\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoom = ({\n  onLogout,\n  onLeave\n}) => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [unseenMessageIds, setUnseenMessageIds] = useState([]);\n  const [viewers, setViewers] = useState({});\n  const [showViewerPopup, setShowViewerPopup] = useState(null);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [selectedRoom, setSelectedRoom] = useState(null);\n  const chatAreaRef = useRef(null);\n  const endOfMessagesRef = useRef(null); // A ref to track the bottom of the messages\n\n  // Fetch currentUser from localStorage\n  useEffect(() => {\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      const user = JSON.parse(storedUser);\n      setCurrentUser(user);\n    }\n    const storedRoom = localStorage.getItem('room');\n    if (storedRoom) {\n      setSelectedRoom(JSON.parse(storedRoom));\n    }\n  }, []);\n  const token = localStorage.getItem('token');\n  const scrollToBottom = () => {\n    if (endOfMessagesRef.current) {\n      endOfMessagesRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  };\n  const scrollToUnseenMessage = unseenMessages => {\n    if (unseenMessages.length > 0) {\n      const firstUnseenMessageId = unseenMessages[0].id;\n      const unseenMessageElement = document.getElementById(`message-${firstUnseenMessageId}`);\n      if (unseenMessageElement) {\n        unseenMessageElement.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center'\n        });\n      }\n    }\n  };\n  const fetchMessages = async () => {\n    try {\n      const response = await axios.get(`http://localhost:8080/message/${selectedRoom.id}`, {\n        headers: {\n          Authorization: `Bearer ${token}` // Include the token in the header\n        }\n      });\n      setMessages(response.data);\n      const unseenResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/unseenMessages`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const unseenMessages = unseenResponse.data;\n      if (unseenMessages.length > 0) {\n        setUnseenMessageIds(unseenMessages.map(msg => msg.id));\n        await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`, unseenMessages.map(msg => msg.id), {\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}` // Include the token in the header\n          }\n        });\n        scrollToUnseenMessage(unseenMessages);\n      }\n\n      // Fetch viewers for each message\n      response.data.forEach(async msg => {\n        const viewersResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${msg.id}/${currentUser.id}/viewers`, {\n          headers: {\n            Authorization: `Bearer ${token}` // Include the token in the header\n          }\n        });\n        setViewers(prevViewers => ({\n          ...prevViewers,\n          [msg.id]: viewersResponse.data\n        }));\n      });\n\n      // Scroll to bottom after initial fetch\n      scrollToBottom();\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n  const markMessageAsSeen = async messageId => {\n    try {\n      await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`, [messageId], {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}` // Include the token in the header\n        }\n      });\n    } catch (error) {\n      console.error('Error marking message as seen:', error);\n    }\n  };\n\n  // Set up the SSE connection for real-time updates\n  useEffect(() => {\n    let hasFetchedUnseenMessages = false; // Flag to prevent fetching multiple times\n    const handleMouseMove = async () => {\n      if (!hasFetchedUnseenMessages) {\n        try {\n          // Fetch unseen messages\n          const unseenResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/unseenMessages`, {\n            headers: {\n              Authorization: `Bearer ${token}` // Include the token in the header\n            }\n          });\n          const unseenMessages = unseenResponse.data;\n          if (unseenMessages.length > 0) {\n            setUnseenMessageIds(unseenMessages.map(msg => msg.id));\n\n            // Mark unseen messages as seen\n            await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`, unseenMessages.map(msg => msg.id), {\n              headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${token}` // Include the token in the header\n              }\n            });\n            scrollToUnseenMessage(unseenMessages);\n          }\n        } catch (error) {\n          console.error(\"Error fetching unseen messages:\", error);\n        }\n        hasFetchedUnseenMessages = true;\n      }\n    };\n    if (selectedRoom !== null && selectedRoom !== void 0 && selectedRoom.id) {\n      fetchMessages(); // Fetch initial messages when the room is selected\n\n      // Set up SSE connection\n      const eventSource = new EventSource(`http://localhost:8080/message/sse/room/${selectedRoom.id}`, {\n        headers: {\n          Authorization: `Bearer ${token}` // Include the token in the header for SSE\n        }\n      });\n      eventSource.onopen = () => {\n        console.log(\"Connection to server opened.\");\n      };\n      eventSource.onmessage = event => {\n        const data = JSON.parse(event.data);\n        if (data.message) {\n          markMessageAsSeen(data.id);\n          setMessages(prevMessages => [...prevMessages, data]);\n          scrollToBottom();\n        } else {\n          // Handle viewer update\n          console.log(data);\n          setViewers(prevViewers => ({\n            ...prevViewers,\n            [data.messageId]: data.viewers\n          }));\n        }\n      };\n\n      // Add mousemove listener\n      document.addEventListener('mousemove', handleMouseMove);\n      return () => {\n        eventSource.close(); // Close the connection when component unmounts\n        document.removeEventListener('mousemove', handleMouseMove); // Clean up listener on unmount\n      };\n    }\n  }, [selectedRoom === null || selectedRoom === void 0 ? void 0 : selectedRoom.id]);\n  const sendMessage = async e => {\n    e.preventDefault();\n    if (message.trim()) {\n      const newMessage = {\n        message: message,\n        user: {\n          id: currentUser.id,\n          username: currentUser.username\n        },\n        room: {\n          id: selectedRoom.id,\n          label: selectedRoom.label\n        }\n      };\n      try {\n        await axios.post('http://localhost:8080/message', newMessage, {\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}` // Include the token in the header\n          }\n        });\n        setMessage(''); // Clear input after sending\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n    }\n  };\n  const toggleViewerPopup = messageId => {\n    if (showViewerPopup === messageId) {\n      setShowViewerPopup(null); // Hide viewer list\n    } else {\n      setShowViewerPopup(messageId); // Show viewer list\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatroom-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"navbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: profileImage,\n          alt: \"Avatar\",\n          className: \"avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"navbar-user\",\n        children: [\" \", currentUser.username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"leave-room-btn\",\n        onClick: onLeave,\n        children: \"Leave Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-area\",\n      ref: chatAreaRef,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: selectedRoom.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-list\",\n        children: [messages.map(msg => {\n          var _msg$user, _viewers$msg$id, _viewers$msg$id2;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            id: `message-${msg.id}`,\n            className: `message ${((_msg$user = msg.user) === null || _msg$user === void 0 ? void 0 : _msg$user.id) === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id) ? 'sent' : 'received'}`,\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: profileImage,\n              alt: \"Avatar\",\n              className: \"avatar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [msg.user ? msg.user.username : 'Unknown User', \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 5\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 5\n              }, this), msg.message || '', /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-date\",\n                children: new Date(msg.date).toLocaleString('en-GB', {\n                  year: 'numeric',\n                  month: '2-digit',\n                  day: '2-digit',\n                  hour: '2-digit',\n                  minute: '2-digit',\n                  second: '2-digit'\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 5\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 9\n            }, this), msg.user.id === currentUser.id && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-viewers\",\n              onClick: () => toggleViewerPopup(msg.id),\n              children: [((_viewers$msg$id = viewers[msg.id]) === null || _viewers$msg$id === void 0 ? void 0 : _viewers$msg$id.length) > 0 ? /*#__PURE__*/_jsxDEV(\"img\", {\n                src: seenIcon,\n                alt: \"Seen\",\n                className: \"viewer-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n                src: multipleSeenIcon,\n                alt: \"Multiple Viewers\",\n                className: \"viewer-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 257,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"viewers-count\",\n                children: ((_viewers$msg$id2 = viewers[msg.id]) === null || _viewers$msg$id2 === void 0 ? void 0 : _viewers$msg$id2.length) || 0\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 13\n            }, this)]\n          }, msg.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 5\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: endOfMessagesRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }, this), showViewerPopup && viewers[showViewerPopup] && /*#__PURE__*/_jsxDEV(ViewerPopup, {\n      viewers: viewers[showViewerPopup],\n      onClose: () => setShowViewerPopup(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      className: \"message-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        placeholder: \"Type a message...\",\n        className: \"message-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"send-btn\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatRoom, \"ZOTFHOxqUyJV/3hquT2jJUs8Ihw=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","ViewerPopup","profileImage","seenIcon","multipleSeenIcon","jsxDEV","_jsxDEV","ChatRoom","onLogout","onLeave","_s","message","setMessage","messages","setMessages","unseenMessageIds","setUnseenMessageIds","viewers","setViewers","showViewerPopup","setShowViewerPopup","currentUser","setCurrentUser","selectedRoom","setSelectedRoom","chatAreaRef","endOfMessagesRef","storedUser","localStorage","getItem","user","JSON","parse","storedRoom","token","scrollToBottom","current","scrollIntoView","behavior","scrollToUnseenMessage","unseenMessages","length","firstUnseenMessageId","id","unseenMessageElement","document","getElementById","block","fetchMessages","response","get","headers","Authorization","data","unseenResponse","map","msg","post","forEach","viewersResponse","prevViewers","error","console","markMessageAsSeen","messageId","hasFetchedUnseenMessages","handleMouseMove","eventSource","EventSource","onopen","log","onmessage","event","prevMessages","addEventListener","close","removeEventListener","sendMessage","e","preventDefault","trim","newMessage","username","room","label","toggleViewerPopup","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","_msg$user","_viewers$msg$id","_viewers$msg$id2","Date","date","toLocaleString","year","month","day","hour","minute","second","onClose","onSubmit","type","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["D:/sic/sic_front/src/component/ChatRoom.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport './chatroom.css';\r\nimport './ViewerPopup.css'; // Import the CSS for the viewer popup\r\nimport ViewerPopup from './popup'; // Import the viewer popup component\r\n\r\nimport profileImage from './profile.png';\r\nimport seenIcon from './double-check.png'; // Add a suitable seen icon image for seen messages\r\nimport multipleSeenIcon from './icons8-select-24.png'; // Add a suitable icon for multiple viewers\r\n\r\nconst ChatRoom = ({onLogout, onLeave}) => {\r\n    const [message, setMessage] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    const [unseenMessageIds, setUnseenMessageIds] = useState([]);\r\n    const [viewers, setViewers] = useState({});\r\n    const [showViewerPopup, setShowViewerPopup] = useState(null);\r\n    const [currentUser, setCurrentUser] = useState(null);\r\n    const [selectedRoom, setSelectedRoom] = useState(null);\r\n    const chatAreaRef = useRef(null);\r\n    const endOfMessagesRef = useRef(null); // A ref to track the bottom of the messages\r\n\r\n     // Fetch currentUser from localStorage\r\n     useEffect(() => {\r\n        const storedUser = localStorage.getItem('currentUser');\r\n        if (storedUser) {\r\n            const user = JSON.parse(storedUser);\r\n            setCurrentUser(user);\r\n        }\r\n    \r\n        const storedRoom = localStorage.getItem('room');\r\n        if (storedRoom) {\r\n            setSelectedRoom(JSON.parse(storedRoom));\r\n        }\r\n    }, []);\r\n    \r\n    const token = localStorage.getItem('token');\r\n    const scrollToBottom = () => {\r\n        if (endOfMessagesRef.current) {\r\n            endOfMessagesRef.current.scrollIntoView({ behavior: 'smooth' });\r\n        }\r\n    };\r\n\r\n    const scrollToUnseenMessage = (unseenMessages) => {\r\n        if (unseenMessages.length > 0) {\r\n            const firstUnseenMessageId = unseenMessages[0].id;\r\n            const unseenMessageElement = document.getElementById(`message-${firstUnseenMessageId}`);\r\n            if (unseenMessageElement) {\r\n                unseenMessageElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n            }\r\n        }\r\n    };\r\n\r\n    const fetchMessages = async () => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:8080/message/${selectedRoom.id}`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`, // Include the token in the header\r\n                },\r\n            });\r\n            setMessages(response.data);\r\n\r\n            const unseenResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/unseenMessages`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            });\r\n            const unseenMessages = unseenResponse.data;\r\n\r\n            if (unseenMessages.length > 0) {\r\n                setUnseenMessageIds(unseenMessages.map(msg => msg.id));\r\n                await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`, unseenMessages.map(msg => msg.id), {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        Authorization: `Bearer ${token}`, // Include the token in the header\r\n                    },\r\n                });\r\n                scrollToUnseenMessage(unseenMessages);\r\n            }\r\n\r\n            // Fetch viewers for each message\r\n            response.data.forEach(async (msg) => {\r\n                const viewersResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${msg.id}/${currentUser.id}/viewers`, {\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`, // Include the token in the header\r\n                    },\r\n                });\r\n                setViewers(prevViewers => ({\r\n                    ...prevViewers,\r\n                    [msg.id]: viewersResponse.data\r\n                }));\r\n            });\r\n\r\n            // Scroll to bottom after initial fetch\r\n            scrollToBottom();\r\n        } catch (error) {\r\n            console.error('Error fetching messages:', error);\r\n        }\r\n    };\r\n\r\n    const markMessageAsSeen = async (messageId) => {\r\n        try {\r\n            await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`, [messageId], {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${token}`, // Include the token in the header\r\n                },\r\n            });\r\n        } catch (error) {\r\n            console.error('Error marking message as seen:', error);\r\n        }\r\n    };\r\n\r\n    // Set up the SSE connection for real-time updates\r\n    useEffect(() => {\r\n        let hasFetchedUnseenMessages = false; // Flag to prevent fetching multiple times\r\n        const handleMouseMove = async () => {\r\n            if (!hasFetchedUnseenMessages) {\r\n                try {\r\n                    // Fetch unseen messages\r\n                    const unseenResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/unseenMessages`, {\r\n                        headers: {\r\n                            Authorization: `Bearer ${token}`, // Include the token in the header\r\n                        },\r\n                    });\r\n                    const unseenMessages = unseenResponse.data;\r\n                    if (unseenMessages.length > 0) {\r\n                        setUnseenMessageIds(unseenMessages.map((msg) => msg.id));\r\n\r\n                        // Mark unseen messages as seen\r\n                        await axios.post(\r\n                            `http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`,\r\n                            unseenMessages.map((msg) => msg.id),\r\n                            {\r\n                                headers: {\r\n                                    'Content-Type': 'application/json',\r\n                                    Authorization: `Bearer ${token}`, // Include the token in the header\r\n                                },\r\n                            }\r\n                        );\r\n                        scrollToUnseenMessage(unseenMessages);\r\n                    }\r\n                } catch (error) {\r\n                    console.error(\"Error fetching unseen messages:\", error);\r\n                }\r\n\r\n                hasFetchedUnseenMessages = true;\r\n            }\r\n        };\r\n\r\n        if (selectedRoom?.id) {\r\n            fetchMessages(); // Fetch initial messages when the room is selected\r\n\r\n            // Set up SSE connection\r\n            const eventSource = new EventSource(`http://localhost:8080/message/sse/room/${selectedRoom.id}`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`, // Include the token in the header for SSE\r\n                },\r\n            });\r\n            eventSource.onopen = () => {\r\n                console.log(\"Connection to server opened.\");\r\n            };\r\n\r\n            eventSource.onmessage = (event) => {\r\n                const data = JSON.parse(event.data);\r\n                if (data.message) {\r\n                    markMessageAsSeen(data.id);\r\n                    setMessages((prevMessages) => [...prevMessages, data]);\r\n                    scrollToBottom();\r\n                } else {\r\n                    // Handle viewer update\r\n                    console.log(data);\r\n                    setViewers((prevViewers) => ({\r\n                        ...prevViewers,\r\n                        [data.messageId]: data.viewers,\r\n                    }));\r\n                }\r\n            };\r\n\r\n            // Add mousemove listener\r\n            document.addEventListener('mousemove', handleMouseMove);\r\n\r\n            return () => {\r\n                eventSource.close(); // Close the connection when component unmounts\r\n                document.removeEventListener('mousemove', handleMouseMove); // Clean up listener on unmount\r\n            };\r\n        }\r\n    }, [selectedRoom?.id]);\r\n\r\n    const sendMessage = async (e) => {\r\n        e.preventDefault();\r\n        if (message.trim()) {\r\n            const newMessage = {\r\n                message: message,\r\n                user: { id: currentUser.id, username: currentUser.username },\r\n                room: { id: selectedRoom.id, label: selectedRoom.label }\r\n            };\r\n\r\n            try {\r\n                await axios.post('http://localhost:8080/message', newMessage, {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        Authorization: `Bearer ${token}`, // Include the token in the header\r\n                    },\r\n                });\r\n                setMessage(''); // Clear input after sending\r\n            } catch (error) {\r\n                console.error('Error sending message:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const toggleViewerPopup = (messageId) => {\r\n        if (showViewerPopup === messageId) {\r\n            setShowViewerPopup(null); // Hide viewer list\r\n        } else {\r\n            setShowViewerPopup(messageId); // Show viewer list\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chatroom-container\">\r\n            <nav className=\"navbar\">\r\n                <span>\r\n                    <img src={profileImage} alt=\"Avatar\" className=\"avatar\" />\r\n                </span>\r\n                <span className=\"navbar-user\"> {currentUser.username}</span>\r\n                <button className=\"leave-room-btn\" onClick={onLeave}>Leave Room</button>\r\n            </nav>\r\n\r\n            <div className=\"chat-area\" ref={chatAreaRef}>\r\n                <h3>{selectedRoom.label}</h3>\r\n                <div className=\"message-list\">\r\n                {messages.map((msg) => (\r\n    <div key={msg.id} id={`message-${msg.id}`} className={`message ${msg.user?.id === currentUser?.id ? 'sent' : 'received'}`}>\r\n        <img src={profileImage} alt=\"Avatar\" className=\"avatar\" />\r\n        <div className=\"message-content\">\r\n    <strong>{msg.user ? msg.user.username : 'Unknown User'}:</strong>\r\n    <br />\r\n    {msg.message || ''}\r\n    <div className=\"message-date\">\r\n        {new Date(msg.date).toLocaleString('en-GB', {\r\n            year: 'numeric',\r\n            month: '2-digit',\r\n            day: '2-digit',\r\n            hour: '2-digit',\r\n            minute: '2-digit',\r\n            second: '2-digit',\r\n        })}\r\n    </div>\r\n</div>\r\n\r\n        {msg.user.id === currentUser.id && (\r\n            <div className=\"message-viewers\" onClick={() => toggleViewerPopup(msg.id)}>\r\n                {viewers[msg.id]?.length >0 ? (\r\n                    <img src={seenIcon} alt=\"Seen\" className=\"viewer-icon\" />\r\n                ) : (\r\n                    <img src={multipleSeenIcon} alt=\"Multiple Viewers\" className=\"viewer-icon\" />\r\n                )}\r\n                <span className=\"viewers-count\">{viewers[msg.id]?.length || 0}</span>\r\n            </div>\r\n        )}\r\n    </div>\r\n))}\r\n                    <div ref={endOfMessagesRef} />\r\n                </div>\r\n            </div>\r\n\r\n            {showViewerPopup && viewers[showViewerPopup] && (\r\n                <ViewerPopup viewers={viewers[showViewerPopup]} onClose={() => setShowViewerPopup(null)} />\r\n            )}\r\n\r\n            <form onSubmit={sendMessage} className=\"message-form\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={message}\r\n                    onChange={(e) => setMessage(e.target.value)}\r\n                    placeholder=\"Type a message...\"\r\n                    className=\"message-input\"\r\n                />\r\n                <button type=\"submit\" className=\"send-btn\">Send</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}