{"ast":null,"code":"var _jsxFileName = \"D:\\\\sic\\\\sic_front\\\\src\\\\component\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef } from 'react';\n// import axios from 'axios';\n// import Pusher from 'pusher-js';\n// import './chatroom.css';\n// import './ViewerPopup.css'; // Import the CSS for the viewer popup\n// import ViewerPopup from './popup'; // Import the viewer popup component\n\n// import profileImage from './profile.png';\n// import seenIcon from './double-check.png'; // Add a suitable seen icon image for seen messages\n// import multipleSeenIcon from './icons8-select-24.png'; // Add a suitable icon for multiple viewers\n\n// const ChatRoom = ({ currentUser, selectedRoom, onLogout, onleave }) => {\n//     const [message, setMessage] = useState('');\n//     const [messages, setMessages] = useState([]);\n//     const [unseenMessageIds, setUnseenMessageIds] = useState([]);\n//     const [viewers, setViewers] = useState({}); // Store viewers for each message\n//     const [showViewerPopup, setShowViewerPopup] = useState(null); // State to manage visible viewer list\n//     const chatAreaRef = useRef(null);\n//     const endOfMessagesRef = useRef(null); // A ref to track the bottom of the messages\n\n//     const scrollToBottom = () => {\n//         if (endOfMessagesRef.current) {\n//             endOfMessagesRef.current.scrollIntoView({ behavior: 'smooth' });\n//         }\n//     };\n\n//     const scrollToUnseenMessage = (unseenMessages) => {\n//         if (unseenMessages.length > 0) {\n//             const firstUnseenMessageId = unseenMessages[0].id;\n//             const unseenMessageElement = document.getElementById(`message-${firstUnseenMessageId}`);\n//             if (unseenMessageElement) {\n//                 unseenMessageElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n//             }\n//         }\n//     };\n\n//     const fetchMessages = async () => {\n//         try {\n//             const response = await axios.get(`http://localhost:8080/message/${selectedRoom.id}`);\n//             setMessages(response.data);\n\n//             const unseenResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/unseenMessages`);\n//             const unseenMessages = unseenResponse.data;\n\n//             if (unseenMessages.length > 0) {\n//                 setUnseenMessageIds(unseenMessages.map(msg => msg.id));\n//                 await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`, unseenMessages.map(msg => msg.id), { headers: { 'Content-Type': 'application/json' } });\n//                 scrollToUnseenMessage(unseenMessages);\n//             }\n\n//             // Fetch viewers for each message\n//             response.data.forEach(async (msg) => {\n//                 const viewersResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${msg.id}/${currentUser.id}/viewers`);\n//                 setViewers(prevViewers => ({\n//                     ...prevViewers,\n//                     [msg.id]: viewersResponse.data\n//                 }));\n//             });\n\n//             // Scroll to bottom after initial fetch\n//             scrollToBottom();\n//         } catch (error) {\n//             console.error('Error fetching messages:', error);\n//         }\n//     };\n\n//     const markMessageAsSeen = async (messageId) => {\n//         try {\n//             await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`, [messageId], { headers: { 'Content-Type': 'application/json' } });\n//         } catch (error) {\n//             console.error('Error marking message as seen:', error);\n//         }\n//     };\n\n//     useEffect(() => {\n//         if (selectedRoom?.id) {\n//             fetchMessages();\n//             const pusher = new Pusher('92044f12c78ba7ccbfdd', { cluster: 'eu',\n//                 encrypted: true\n//              });\n\n//             const channel = pusher.subscribe(`room-${selectedRoom.id}`);\n//              channel.bind('new-message', async (data) => {\n//                 console.log('Raw message received from Pusher:', data); // Log raw data\n//                 let newMessage;\n//                 try {\n//                     newMessage = typeof data === 'string' ? JSON.parse(data) : data;\n//                     console.log('Parsed new message:', newMessage); // Log the parsed message\n//                 } catch (error) {\n//                     console.error('Failed to parse message:', error); // Log parsing errors\n//                     return; // Exit if parsing fails\n//                 }\n\n//                 setMessages((prevMessages) => [...prevMessages, newMessage]);\n\n//                 await markMessageAsSeen(newMessage.id);\n\n//                 try {\n//                     const viewersResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${newMessage.id}/${currentUser.id}/viewers`);\n//                     setViewers(prevViewers => ({\n//                         ...prevViewers,\n//                         [newMessage.id]: viewersResponse.data\n//                     }));\n//                 } catch (error) {\n//                     console.error('Error fetching viewers for new message:', error);\n//                 }\n\n//                 scrollToBottom();\n//             });\n\n//             channel.bind('message-seen', (seenData) => {\n//                 console.log(\"yee\");\n//                 const { messageId, viewers } = seenData;\n//                 setViewers(prevViewers => ({\n//                     ...prevViewers,\n//                     [messageId]: viewers // Update the viewers list for the message that was seen\n//                 }));\n//             });\n\n//             return () => {\n//                 pusher.unsubscribe(`room-${selectedRoom.id}`);\n//             };\n//         }\n//     }, [selectedRoom?.id]);\n\n//     const handleLeaveRoom = async () => {\n//         try {\n//             // Update user's active status to leave the room\n//             await axios.put(`http://localhost:8080/join/${currentUser.id}/${selectedRoom.id}`, { isActive: false });\n//             onleave(); // Invoke the onLogout function to return to room selector\n//         } catch (error) {\n//             console.error('Error leaving room:', error);\n//         }\n//     };\n\n//     const sendMessage = async (e) => {\n//         e.preventDefault();\n//         if (message.trim()) {\n//             const newMessage = {\n//                 message: message,\n//                 user: { id: currentUser.id, username: currentUser.username },\n//                 room: { id: selectedRoom.id, label: selectedRoom.label }\n//             };\n\n//             try {\n//                 await axios.post('http://localhost:8080/message', newMessage);\n//                 console.log('Message sent:', newMessage); // Log the sent message\n//                 setMessage(''); // Clear input after sending\n//             } catch (error) {\n//                 console.error('Error sending message:', error);\n//             }\n//         }\n//     };\n\n//     const toggleViewerPopup = (messageId) => {\n//         if (showViewerPopup === messageId) {\n//             setShowViewerPopup(null); // Hide viewer list\n//         } else {\n//             setShowViewerPopup(messageId); // Show viewer list\n//         }\n//     };\n\n//     return (\n//         <div className=\"chatroom-container\">\n//             <nav className=\"navbar\">\n//                 <span>\n//                     <img src={profileImage} alt=\"Avatar\" className=\"avatar\" />\n//                 </span>\n//                 <span className=\"navbar-user\"> {currentUser.username}</span>\n//                 <button className=\"leave-room-btn\" onClick={handleLeaveRoom}>Leave Room</button>\n//             </nav>\n\n//             <div className=\"chat-area\" ref={chatAreaRef}>\n//                 <h3>{selectedRoom.label}</h3>\n//                 <div className=\"message-list\">\n//                     {messages.map((msg) => (\n//                         <div key={msg.id} id={`message-${msg.id}`} className={`message ${msg.user?.id === currentUser?.id ? 'sent' : 'received'}`}>\n//                             <img src={profileImage} alt=\"Avatar\" className=\"avatar\" />\n//                             <div className=\"message-content\">\n//                                 <strong>{msg.user ? msg.user.username : 'Unknown User'}:</strong>\n//                                 <br></br>\n//                                 {msg.message || ''}\n//                             </div>\n\n//                             {msg.user.id === currentUser.id && (\n//                                 <div className=\"message-viewers\" onClick={() => toggleViewerPopup(msg.id)}>\n//                                     {viewers[msg.id]?.length === 0 && (\n//                                         <img src={multipleSeenIcon} alt=\"Not viewed\" className=\"viewer-icon\" title=\"Not viewed\" />\n//                                     )}\n//                                     {viewers[msg.id]?.length >= 1 && (\n//                                         <img src={seenIcon} alt=\"Seen by one\" className=\"viewer-icon\" title=\"Seen by at least one\" />\n//                                     )}\n//                                 </div>\n//                             )}\n//                         </div>\n//                     ))}\n//                     <div ref={endOfMessagesRef}></div> {/* Marker for the end of messages */}\n//                 </div>\n\n//                 <form onSubmit={sendMessage} className=\"message-form\">\n//                     <input\n//                         type=\"text\"\n//                         className=\"message-input\"\n//                         value={message}\n//                         onChange={(e) => setMessage(e.target.value)}\n//                         placeholder=\"Type a message...\"\n//                     />\n//                     <button type=\"submit\" className=\"send-btn\">Send</button>\n//                 </form>\n//             </div>\n\n//             {showViewerPopup && viewers[showViewerPopup] && (\n//                 <ViewerPopup\n//                     viewers={viewers[showViewerPopup]}\n//                     onClose={() => setShowViewerPopup(null)}\n//                 />\n//             )}\n//         </div>\n//     );\n// };\n\n// export default ChatRoom;\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './chatroom.css';\nimport './ViewerPopup.css'; // Import the CSS for the viewer popup\nimport ViewerPopup from './popup'; // Import the viewer popup component\n\nimport profileImage from './profile.png';\nimport seenIcon from './double-check.png'; // Add a suitable seen icon image for seen messages\nimport multipleSeenIcon from './icons8-select-24.png'; // Add a suitable icon for multiple viewers\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoom = ({\n  currentUser,\n  selectedRoom,\n  onLogout,\n  onleave\n}) => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [unseenMessageIds, setUnseenMessageIds] = useState([]);\n  const [viewers, setViewers] = useState({});\n  const [showViewerPopup, setShowViewerPopup] = useState(null);\n  const chatAreaRef = useRef(null);\n  const endOfMessagesRef = useRef(null); // A ref to track the bottom of the messages\n  const scrollToBottom = () => {\n    var _endOfMessagesRef$cur;\n    const container = (_endOfMessagesRef$cur = endOfMessagesRef.current) === null || _endOfMessagesRef$cur === void 0 ? void 0 : _endOfMessagesRef$cur.parentNode;\n    if (container) {\n      container.scrollTop = container.scrollHeight;\n    }\n  };\n  const scrollToUnseenMessage = unseenMessages => {\n    if (unseenMessages.length > 0) {\n      const firstUnseenMessageId = unseenMessages[0].id;\n      const unseenMessageElement = document.getElementById(`message-${firstUnseenMessageId}`);\n      if (unseenMessageElement) {\n        unseenMessageElement.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center'\n        });\n      }\n    }\n  };\n  const fetchMessages = async () => {\n    try {\n      const response = await axios.get(`http://localhost:8080/message/${selectedRoom.id}`);\n      setMessages(response.data);\n      const unseenResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/unseenMessages`);\n      const unseenMessages = unseenResponse.data;\n      if (unseenMessages.length > 0) {\n        setUnseenMessageIds(unseenMessages.map(msg => msg.id));\n        await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`, unseenMessages.map(msg => msg.id), {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        scrollToUnseenMessage(unseenMessages);\n      }\n\n      // Fetch viewers for each message\n      response.data.forEach(async msg => {\n        const viewersResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${msg.id}/${currentUser.id}/viewers`);\n        setViewers(prevViewers => ({\n          ...prevViewers,\n          [msg.id]: viewersResponse.data\n        }));\n      });\n\n      // Scroll to bottom after initial fetch\n      scrollToBottom();\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n  const markMessageAsSeen = async messageId => {\n    try {\n      await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`, [messageId], {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    } catch (error) {\n      console.error('Error marking message as seen:', error);\n    }\n  };\n\n  // Set up the SSE connection for real-time updates\n  useEffect(() => {\n    let hasFetchedUnseenMessages = false; // Flag to prevent fetching multiple times\n    const handleMouseMove = async () => {\n      if (!hasFetchedUnseenMessages) {\n        try {\n          // Fetch unseen messages\n          const unseenResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/unseenMessages`);\n          const unseenMessages = unseenResponse.data;\n          if (unseenMessages.length > 0) {\n            setUnseenMessageIds(unseenMessages.map(msg => msg.id));\n\n            // Mark unseen messages as seen\n            await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`, unseenMessages.map(msg => msg.id), {\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            });\n\n            // Optionally scroll to the first unseen message\n            scrollToUnseenMessage(unseenMessages);\n          }\n        } catch (error) {\n          console.error(\"Error fetching unseen messages:\", error);\n        }\n\n        // Prevent further fetching on subsequent mouse movements\n        hasFetchedUnseenMessages = true;\n      }\n    };\n    if (selectedRoom !== null && selectedRoom !== void 0 && selectedRoom.id) {\n      fetchMessages(); // Fetch initial messages when the room is selected\n\n      // Set up SSE connection\n      const eventSource = new EventSource(`http://localhost:8080/message/sse/room/${selectedRoom.id}`);\n      eventSource.onopen = () => {\n        console.log(\"Connection to server opened.\");\n      };\n      eventSource.onmessage = event => {\n        const data = JSON.parse(event.data);\n        if (data.message) {\n          markMessageAsSeen(data.id);\n          setMessages(prevMessages => [...prevMessages, data]);\n          scrollToBottom();\n        } else {\n          // Handle viewer update\n          console.log(data);\n          setViewers(prevViewers => ({\n            ...prevViewers,\n            [data.messageId]: data.viewers\n          }));\n        }\n      };\n\n      // Add mousemove listener\n      document.addEventListener('mousemove', handleMouseMove);\n      return () => {\n        eventSource.close(); // Close the connection when component unmounts\n        document.removeEventListener('mousemove', handleMouseMove); // Clean up listener on unmount\n      };\n    }\n  }, [selectedRoom === null || selectedRoom === void 0 ? void 0 : selectedRoom.id]);\n  const sendMessage = async e => {\n    e.preventDefault();\n    if (message.trim()) {\n      const newMessage = {\n        message: message,\n        user: {\n          id: currentUser.id,\n          username: currentUser.username\n        },\n        room: {\n          id: selectedRoom.id,\n          label: selectedRoom.label\n        }\n      };\n      try {\n        await axios.post('http://localhost:8080/message', newMessage);\n        setMessage(''); // Clear input after sending\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n    }\n  };\n  const toggleViewerPopup = messageId => {\n    if (showViewerPopup === messageId) {\n      setShowViewerPopup(null); // Hide viewer list\n    } else {\n      setShowViewerPopup(messageId); // Show viewer list\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatroom-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"navbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: profileImage,\n          alt: \"Avatar\",\n          className: \"avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"navbar-user\",\n        children: [\" \", currentUser.username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"leave-room-btn\",\n        onClick: onleave,\n        children: \"Leave Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-area\",\n      ref: chatAreaRef,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: selectedRoom.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-list\",\n        children: [messages.map(msg => {\n          var _msg$user, _viewers$msg$id, _viewers$msg$id2;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            id: `message-${msg.id}`,\n            className: `message ${((_msg$user = msg.user) === null || _msg$user === void 0 ? void 0 : _msg$user.id) === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id) ? 'sent' : 'received'}`,\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: profileImage,\n              alt: \"Avatar\",\n              className: \"avatar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [msg.user ? msg.user.username : 'Unknown User', \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 414,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 415,\n                columnNumber: 13\n              }, this), msg.message || '', \"  \", msg.date || '']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 9\n            }, this), msg.user.id === currentUser.id && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-viewers\",\n              onClick: () => toggleViewerPopup(msg.id),\n              children: [((_viewers$msg$id = viewers[msg.id]) === null || _viewers$msg$id === void 0 ? void 0 : _viewers$msg$id.length) === 0 && /*#__PURE__*/_jsxDEV(\"img\", {\n                src: multipleSeenIcon,\n                alt: \"Not viewed\",\n                className: \"viewer-icon\",\n                title: \"Not viewed\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 422,\n                columnNumber: 21\n              }, this), ((_viewers$msg$id2 = viewers[msg.id]) === null || _viewers$msg$id2 === void 0 ? void 0 : _viewers$msg$id2.length) >= 1 && /*#__PURE__*/_jsxDEV(\"img\", {\n                src: seenIcon,\n                alt: \"Seen by one\",\n                className: \"viewer-icon\",\n                title: \"Seen by at least one\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 425,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 420,\n              columnNumber: 13\n            }, this)]\n          }, msg.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 5\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: endOfMessagesRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 21\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: sendMessage,\n        className: \"message-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"message-input\",\n          value: message,\n          onChange: e => setMessage(e.target.value),\n          placeholder: \"Type a message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"send-btn\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 13\n    }, this), showViewerPopup && viewers[showViewerPopup] && /*#__PURE__*/_jsxDEV(ViewerPopup, {\n      viewers: viewers[showViewerPopup],\n      onClose: () => setShowViewerPopup(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 398,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatRoom, \"T/jiVps4+PRD7+JP8CEdPgzfK98=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","ViewerPopup","profileImage","seenIcon","multipleSeenIcon","jsxDEV","_jsxDEV","ChatRoom","currentUser","selectedRoom","onLogout","onleave","_s","message","setMessage","messages","setMessages","unseenMessageIds","setUnseenMessageIds","viewers","setViewers","showViewerPopup","setShowViewerPopup","chatAreaRef","endOfMessagesRef","scrollToBottom","_endOfMessagesRef$cur","container","current","parentNode","scrollTop","scrollHeight","scrollToUnseenMessage","unseenMessages","length","firstUnseenMessageId","id","unseenMessageElement","document","getElementById","scrollIntoView","behavior","block","fetchMessages","response","get","data","unseenResponse","map","msg","post","headers","forEach","viewersResponse","prevViewers","error","console","markMessageAsSeen","messageId","hasFetchedUnseenMessages","handleMouseMove","eventSource","EventSource","onopen","log","onmessage","event","JSON","parse","prevMessages","addEventListener","close","removeEventListener","sendMessage","e","preventDefault","trim","newMessage","user","username","room","label","toggleViewerPopup","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","_msg$user","_viewers$msg$id","_viewers$msg$id2","date","title","onSubmit","type","value","onChange","target","placeholder","onClose","_c","$RefreshReg$"],"sources":["D:/sic/sic_front/src/component/ChatRoom.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\r\n// import axios from 'axios';\r\n// import Pusher from 'pusher-js';\r\n// import './chatroom.css';\r\n// import './ViewerPopup.css'; // Import the CSS for the viewer popup\r\n// import ViewerPopup from './popup'; // Import the viewer popup component\r\n\r\n// import profileImage from './profile.png';\r\n// import seenIcon from './double-check.png'; // Add a suitable seen icon image for seen messages\r\n// import multipleSeenIcon from './icons8-select-24.png'; // Add a suitable icon for multiple viewers\r\n\r\n// const ChatRoom = ({ currentUser, selectedRoom, onLogout, onleave }) => {\r\n//     const [message, setMessage] = useState('');\r\n//     const [messages, setMessages] = useState([]);\r\n//     const [unseenMessageIds, setUnseenMessageIds] = useState([]);\r\n//     const [viewers, setViewers] = useState({}); // Store viewers for each message\r\n//     const [showViewerPopup, setShowViewerPopup] = useState(null); // State to manage visible viewer list\r\n//     const chatAreaRef = useRef(null);\r\n//     const endOfMessagesRef = useRef(null); // A ref to track the bottom of the messages\r\n\r\n//     const scrollToBottom = () => {\r\n//         if (endOfMessagesRef.current) {\r\n//             endOfMessagesRef.current.scrollIntoView({ behavior: 'smooth' });\r\n//         }\r\n//     };\r\n\r\n//     const scrollToUnseenMessage = (unseenMessages) => {\r\n//         if (unseenMessages.length > 0) {\r\n//             const firstUnseenMessageId = unseenMessages[0].id;\r\n//             const unseenMessageElement = document.getElementById(`message-${firstUnseenMessageId}`);\r\n//             if (unseenMessageElement) {\r\n//                 unseenMessageElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     const fetchMessages = async () => {\r\n//         try {\r\n//             const response = await axios.get(`http://localhost:8080/message/${selectedRoom.id}`);\r\n//             setMessages(response.data);\r\n\r\n//             const unseenResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/unseenMessages`);\r\n//             const unseenMessages = unseenResponse.data;\r\n\r\n//             if (unseenMessages.length > 0) {\r\n//                 setUnseenMessageIds(unseenMessages.map(msg => msg.id));\r\n//                 await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`, unseenMessages.map(msg => msg.id), { headers: { 'Content-Type': 'application/json' } });\r\n//                 scrollToUnseenMessage(unseenMessages);\r\n//             }\r\n\r\n//             // Fetch viewers for each message\r\n//             response.data.forEach(async (msg) => {\r\n//                 const viewersResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${msg.id}/${currentUser.id}/viewers`);\r\n//                 setViewers(prevViewers => ({\r\n//                     ...prevViewers,\r\n//                     [msg.id]: viewersResponse.data\r\n//                 }));\r\n//             });\r\n\r\n//             // Scroll to bottom after initial fetch\r\n//             scrollToBottom();\r\n//         } catch (error) {\r\n//             console.error('Error fetching messages:', error);\r\n//         }\r\n//     };\r\n\r\n//     const markMessageAsSeen = async (messageId) => {\r\n//         try {\r\n//             await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`, [messageId], { headers: { 'Content-Type': 'application/json' } });\r\n//         } catch (error) {\r\n//             console.error('Error marking message as seen:', error);\r\n//         }\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         if (selectedRoom?.id) {\r\n//             fetchMessages();\r\n//             const pusher = new Pusher('92044f12c78ba7ccbfdd', { cluster: 'eu',\r\n//                 encrypted: true\r\n//              });\r\n\r\n\r\n             \r\n\r\n//             const channel = pusher.subscribe(`room-${selectedRoom.id}`);\r\n//              channel.bind('new-message', async (data) => {\r\n//                 console.log('Raw message received from Pusher:', data); // Log raw data\r\n//                 let newMessage;\r\n//                 try {\r\n//                     newMessage = typeof data === 'string' ? JSON.parse(data) : data;\r\n//                     console.log('Parsed new message:', newMessage); // Log the parsed message\r\n//                 } catch (error) {\r\n//                     console.error('Failed to parse message:', error); // Log parsing errors\r\n//                     return; // Exit if parsing fails\r\n//                 }\r\n            \r\n//                 setMessages((prevMessages) => [...prevMessages, newMessage]);\r\n            \r\n//                 await markMessageAsSeen(newMessage.id);\r\n                \r\n//                 try {\r\n//                     const viewersResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${newMessage.id}/${currentUser.id}/viewers`);\r\n//                     setViewers(prevViewers => ({\r\n//                         ...prevViewers,\r\n//                         [newMessage.id]: viewersResponse.data\r\n//                     }));\r\n//                 } catch (error) {\r\n//                     console.error('Error fetching viewers for new message:', error);\r\n//                 }\r\n            \r\n//                 scrollToBottom();\r\n//             });\r\n            \r\n\r\n            \r\n            \r\n            \r\n\r\n//             channel.bind('message-seen', (seenData) => {\r\n//                 console.log(\"yee\");\r\n//                 const { messageId, viewers } = seenData;\r\n//                 setViewers(prevViewers => ({\r\n//                     ...prevViewers,\r\n//                     [messageId]: viewers // Update the viewers list for the message that was seen\r\n//                 }));\r\n//             });\r\n\r\n//             return () => {\r\n//                 pusher.unsubscribe(`room-${selectedRoom.id}`);\r\n//             };\r\n//         }\r\n//     }, [selectedRoom?.id]);\r\n\r\n//     const handleLeaveRoom = async () => {\r\n//         try {\r\n//             // Update user's active status to leave the room\r\n//             await axios.put(`http://localhost:8080/join/${currentUser.id}/${selectedRoom.id}`, { isActive: false });\r\n//             onleave(); // Invoke the onLogout function to return to room selector\r\n//         } catch (error) {\r\n//             console.error('Error leaving room:', error);\r\n//         }\r\n//     };\r\n\r\n//     const sendMessage = async (e) => {\r\n//         e.preventDefault();\r\n//         if (message.trim()) {\r\n//             const newMessage = {\r\n//                 message: message,\r\n//                 user: { id: currentUser.id, username: currentUser.username },\r\n//                 room: { id: selectedRoom.id, label: selectedRoom.label }\r\n//             };\r\n    \r\n//             try {\r\n//                 await axios.post('http://localhost:8080/message', newMessage);\r\n//                 console.log('Message sent:', newMessage); // Log the sent message\r\n//                 setMessage(''); // Clear input after sending\r\n//             } catch (error) {\r\n//                 console.error('Error sending message:', error);\r\n//             }\r\n//         }\r\n//     };\r\n    \r\n\r\n//     const toggleViewerPopup = (messageId) => {\r\n//         if (showViewerPopup === messageId) {\r\n//             setShowViewerPopup(null); // Hide viewer list\r\n//         } else {\r\n//             setShowViewerPopup(messageId); // Show viewer list\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"chatroom-container\">\r\n//             <nav className=\"navbar\">\r\n//                 <span>\r\n//                     <img src={profileImage} alt=\"Avatar\" className=\"avatar\" />\r\n//                 </span>\r\n//                 <span className=\"navbar-user\"> {currentUser.username}</span>\r\n//                 <button className=\"leave-room-btn\" onClick={handleLeaveRoom}>Leave Room</button>\r\n//             </nav>\r\n\r\n//             <div className=\"chat-area\" ref={chatAreaRef}>\r\n//                 <h3>{selectedRoom.label}</h3>\r\n//                 <div className=\"message-list\">\r\n//                     {messages.map((msg) => (\r\n//                         <div key={msg.id} id={`message-${msg.id}`} className={`message ${msg.user?.id === currentUser?.id ? 'sent' : 'received'}`}>\r\n//                             <img src={profileImage} alt=\"Avatar\" className=\"avatar\" />\r\n//                             <div className=\"message-content\">\r\n//                                 <strong>{msg.user ? msg.user.username : 'Unknown User'}:</strong>\r\n//                                 <br></br>\r\n//                                 {msg.message || ''}\r\n//                             </div>\r\n\r\n//                             {msg.user.id === currentUser.id && (\r\n//                                 <div className=\"message-viewers\" onClick={() => toggleViewerPopup(msg.id)}>\r\n//                                     {viewers[msg.id]?.length === 0 && (\r\n//                                         <img src={multipleSeenIcon} alt=\"Not viewed\" className=\"viewer-icon\" title=\"Not viewed\" />\r\n//                                     )}\r\n//                                     {viewers[msg.id]?.length >= 1 && (\r\n//                                         <img src={seenIcon} alt=\"Seen by one\" className=\"viewer-icon\" title=\"Seen by at least one\" />\r\n//                                     )}\r\n//                                 </div>\r\n//                             )}\r\n//                         </div>\r\n//                     ))}\r\n//                     <div ref={endOfMessagesRef}></div> {/* Marker for the end of messages */}\r\n//                 </div>\r\n\r\n//                 <form onSubmit={sendMessage} className=\"message-form\">\r\n//                     <input\r\n//                         type=\"text\"\r\n//                         className=\"message-input\"\r\n//                         value={message}\r\n//                         onChange={(e) => setMessage(e.target.value)}\r\n//                         placeholder=\"Type a message...\"\r\n//                     />\r\n//                     <button type=\"submit\" className=\"send-btn\">Send</button>\r\n//                 </form>\r\n//             </div>\r\n\r\n//             {showViewerPopup && viewers[showViewerPopup] && (\r\n//                 <ViewerPopup\r\n//                     viewers={viewers[showViewerPopup]}\r\n//                     onClose={() => setShowViewerPopup(null)}\r\n//                 />\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default ChatRoom;\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport './chatroom.css';\r\nimport './ViewerPopup.css'; // Import the CSS for the viewer popup\r\nimport ViewerPopup from './popup'; // Import the viewer popup component\r\n\r\nimport profileImage from './profile.png';\r\nimport seenIcon from './double-check.png'; // Add a suitable seen icon image for seen messages\r\nimport multipleSeenIcon from './icons8-select-24.png'; // Add a suitable icon for multiple viewers\r\n\r\nconst ChatRoom = ({ currentUser, selectedRoom, onLogout, onleave }) => {\r\n    const [message, setMessage] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    const [unseenMessageIds, setUnseenMessageIds] = useState([]);\r\n    const [viewers, setViewers] = useState({});\r\n    const [showViewerPopup, setShowViewerPopup] = useState(null);\r\n    const chatAreaRef = useRef(null);\r\n    const endOfMessagesRef = useRef(null); // A ref to track the bottom of the messages\r\n    const scrollToBottom = () => {\r\n        const container = endOfMessagesRef.current?.parentNode;\r\n        if (container) {\r\n            container.scrollTop = container.scrollHeight;\r\n        }\r\n    };\r\n    const scrollToUnseenMessage = (unseenMessages) => {\r\n        if (unseenMessages.length > 0) {\r\n            const firstUnseenMessageId = unseenMessages[0].id;\r\n            const unseenMessageElement = document.getElementById(`message-${firstUnseenMessageId}`);\r\n            if (unseenMessageElement) {\r\n                unseenMessageElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n            }\r\n        }\r\n    };\r\n        const fetchMessages = async () => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:8080/message/${selectedRoom.id}`);\r\n            setMessages(response.data);\r\n\r\n            const unseenResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/unseenMessages`);\r\n            const unseenMessages = unseenResponse.data;\r\n\r\n            if (unseenMessages.length > 0) {\r\n                setUnseenMessageIds(unseenMessages.map(msg => msg.id));\r\n                await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`, unseenMessages.map(msg => msg.id), { headers: { 'Content-Type': 'application/json' } });\r\n                scrollToUnseenMessage(unseenMessages);\r\n            }\r\n\r\n            // Fetch viewers for each message\r\n            response.data.forEach(async (msg) => {\r\n                const viewersResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${msg.id}/${currentUser.id}/viewers`);\r\n                setViewers(prevViewers => ({\r\n                    ...prevViewers,\r\n                    [msg.id]: viewersResponse.data\r\n                }));\r\n            });\r\n\r\n            // Scroll to bottom after initial fetch\r\n            scrollToBottom();\r\n        } catch (error) {\r\n            console.error('Error fetching messages:', error);\r\n        }\r\n    };\r\n\r\n    const markMessageAsSeen = async (messageId) => {\r\n        try {\r\n            await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`, [messageId], { headers: { 'Content-Type': 'application/json' } });\r\n        } catch (error) {\r\n            console.error('Error marking message as seen:', error);\r\n        }\r\n    };\r\n\r\n    // Set up the SSE connection for real-time updates\r\n    useEffect(() => {\r\n        let hasFetchedUnseenMessages = false; // Flag to prevent fetching multiple times\r\n        const handleMouseMove = async () => {\r\n            if (!hasFetchedUnseenMessages) {\r\n                try {\r\n                    // Fetch unseen messages\r\n                    const unseenResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/unseenMessages`);\r\n                    const unseenMessages = unseenResponse.data;\r\n                    if (unseenMessages.length > 0) {\r\n                        setUnseenMessageIds(unseenMessages.map((msg) => msg.id));\r\n    \r\n                        // Mark unseen messages as seen\r\n                        await axios.post(\r\n                            `http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`,\r\n                            unseenMessages.map((msg) => msg.id),\r\n                            { headers: { 'Content-Type': 'application/json' } }\r\n                        );\r\n    \r\n                        // Optionally scroll to the first unseen message\r\n                        scrollToUnseenMessage(unseenMessages);\r\n                    }\r\n                } catch (error) {\r\n                    console.error(\"Error fetching unseen messages:\", error);\r\n                }\r\n    \r\n                // Prevent further fetching on subsequent mouse movements\r\n                hasFetchedUnseenMessages = true;\r\n            }\r\n        };\r\n    \r\n        if (selectedRoom?.id) {\r\n            fetchMessages(); // Fetch initial messages when the room is selected\r\n    \r\n            // Set up SSE connection\r\n            const eventSource = new EventSource(`http://localhost:8080/message/sse/room/${selectedRoom.id}`);\r\n            eventSource.onopen = () => {\r\n                console.log(\"Connection to server opened.\");\r\n            };\r\n    \r\n            eventSource.onmessage = (event) => {\r\n                const data = JSON.parse(event.data);\r\n                if (data.message) {\r\n                    markMessageAsSeen(data.id);\r\n                    setMessages((prevMessages) => [...prevMessages, data]);\r\n                    scrollToBottom();\r\n                } else {\r\n                    // Handle viewer update\r\n                    console.log(data);\r\n                    setViewers((prevViewers) => ({\r\n                        ...prevViewers,\r\n                        [data.messageId]: data.viewers,\r\n                    }));\r\n                }\r\n            };\r\n    \r\n            // Add mousemove listener\r\n            document.addEventListener('mousemove', handleMouseMove);\r\n    \r\n            return () => {\r\n                eventSource.close(); // Close the connection when component unmounts\r\n                document.removeEventListener('mousemove', handleMouseMove); // Clean up listener on unmount\r\n            };\r\n        }\r\n    }, [selectedRoom?.id]);\r\n    \r\n    \r\n\r\n    const sendMessage = async (e) => {\r\n        e.preventDefault();\r\n        if (message.trim()) {\r\n            const newMessage = {\r\n                message: message,\r\n                user: { id: currentUser.id, username: currentUser.username },\r\n                room: { id: selectedRoom.id, label: selectedRoom.label }\r\n            };\r\n\r\n            try {\r\n                await axios.post('http://localhost:8080/message', newMessage);\r\n                setMessage(''); // Clear input after sending\r\n            } catch (error) {\r\n                console.error('Error sending message:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const toggleViewerPopup = (messageId) => {\r\n        if (showViewerPopup === messageId) {\r\n            setShowViewerPopup(null); // Hide viewer list\r\n        } else {\r\n            setShowViewerPopup(messageId); // Show viewer list\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chatroom-container\">\r\n            <nav className=\"navbar\">\r\n                <span>\r\n                    <img src={profileImage} alt=\"Avatar\" className=\"avatar\" />\r\n                </span>\r\n                <span className=\"navbar-user\"> {currentUser.username}</span>\r\n                <button className=\"leave-room-btn\" onClick={onleave}>Leave Room</button>\r\n            </nav>\r\n\r\n            <div className=\"chat-area\" ref={chatAreaRef}>\r\n                <h3>{selectedRoom.label}</h3>\r\n                <div className=\"message-list\">\r\n                {messages.map((msg) => (\r\n    <div key={msg.id} id={`message-${msg.id}`} className={`message ${msg.user?.id === currentUser?.id ? 'sent' : 'received'}`}>\r\n        <img src={profileImage} alt=\"Avatar\" className=\"avatar\" />\r\n        <div className=\"message-content\">\r\n            <strong>{msg.user ? msg.user.username : 'Unknown User'}:</strong>\r\n            <br></br>\r\n            {msg.message || ''}  {msg.date || ''}\r\n        </div>\r\n\r\n        {msg.user.id === currentUser.id && (\r\n            <div className=\"message-viewers\" onClick={() => toggleViewerPopup(msg.id)}>\r\n                {viewers[msg.id]?.length === 0 && (\r\n                    <img src={multipleSeenIcon} alt=\"Not viewed\" className=\"viewer-icon\" title=\"Not viewed\" />\r\n                )}\r\n                {viewers[msg.id]?.length >= 1 && (\r\n                    <img src={seenIcon} alt=\"Seen by one\" className=\"viewer-icon\" title=\"Seen by at least one\" />\r\n                )}\r\n            </div>\r\n        )}\r\n    </div>\r\n))}\r\n\r\n                    <div ref={endOfMessagesRef}></div> {/* Marker for the end of messages */}\r\n                </div>\r\n\r\n                <form onSubmit={sendMessage} className=\"message-form\">\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"message-input\"\r\n                        value={message}\r\n                        onChange={(e) => setMessage(e.target.value)}\r\n                        placeholder=\"Type a message...\"\r\n                    />\r\n                    <button type=\"submit\" className=\"send-btn\">Send</button>\r\n                </form>\r\n            </div>\r\n\r\n            {showViewerPopup && viewers[showViewerPopup] && (\r\n                <ViewerPopup\r\n                    viewers={viewers[showViewerPopup]}\r\n                    onClose={() => setShowViewerPopup(null)}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,gBAAgB;AACvB,OAAO,mBAAmB,CAAC,CAAC;AAC5B,OAAOC,WAAW,MAAM,SAAS,CAAC,CAAC;;AAEnC,OAAOC,YAAY,MAAM,eAAe;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}