{"ast":null,"code":"var _jsxFileName = \"D:\\\\sic\\\\sic_front\\\\src\\\\component\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './chatroom.css'; // You can style the component as needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoom = ({\n  currentUser,\n  selectedRoom,\n  onLogout\n}) => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]); // Stores all messages\n  const [unseenMessageId, setUnseenMessageId] = useState(null); // Store the ID of the first unseen message\n\n  const chatAreaRef = useRef(null); // To scroll to the first unseen message\n\n  // Fetch all messages of the current room when the component loads\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        // Fetch all messages for the room\n        const response = await axios.get(`http://localhost:8080/message/${selectedRoom.id}`);\n        setMessages(response.data); // Update the message list with all messages\n\n        // Fetch unseen messages and highlight them\n        const unseenResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/unseenMessages`);\n        if (unseenResponse.data.length > 0) {\n          const lastUnseenMessage = unseenResponse.data[unseenResponse.data.length - 1];\n          setUnseenMessageId(lastUnseenMessage.id);\n\n          // Mark all unseen messages as seen\n          await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/lastSeenMessage`, {\n            lastSeenMessageId: lastUnseenMessage.id\n          }, {\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n      }\n    };\n    fetchMessages();\n  }, [selectedRoom.id, currentUser.id]);\n\n  // Scroll to the first unseen message when messages change\n  useEffect(() => {\n    if (unseenMessageId && chatAreaRef.current) {\n      const unseenMessageElement = document.getElementById(`message-${unseenMessageId}`);\n      if (unseenMessageElement) {\n        unseenMessageElement.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center'\n        });\n      }\n    }\n  }, [unseenMessageId, messages]);\n  const handleLogout = async () => {\n    try {\n      await axios.put(`http://localhost:8080/join/${currentUser.id}/${selectedRoom.id}`);\n      onLogout();\n    } catch (error) {\n      console.error('Error updating join status:', error);\n    }\n  };\n  const sendMessage = async e => {\n    e.preventDefault();\n    if (message.trim()) {\n      try {\n        const newMessage = {\n          message: message,\n          user: {\n            id: currentUser.id,\n            username: currentUser.username\n          },\n          room: {\n            id: selectedRoom.id,\n            label: selectedRoom.label\n          }\n        };\n        const response = await axios.post('http://localhost:8080/message', newMessage);\n        const savedMessage = response.data;\n        setMessages([...messages, savedMessage]); // Add the new message to the list\n        setMessage('');\n\n        // Update the last seen message for the current user\n        await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/lastSeenMessage`, {\n          lastSeenMessageId: savedMessage.id\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatroom-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"navbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"navbar-user\",\n        children: [\"Logged in as: \", currentUser.username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"logout-btn\",\n        onClick: handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-area\",\n      ref: chatAreaRef,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Chatting in: \", selectedRoom.label]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-list\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          id: `message-${msg.id}`,\n          className: `message ${unseenMessageId && msg.id > unseenMessageId ? 'unseen-message' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [msg.user ? msg.user.username : 'Unknown User', \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 29\n          }, this), \" \", msg.message || '']\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: sendMessage,\n        className: \"message-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"message-input\",\n          value: message,\n          onChange: e => setMessage(e.target.value),\n          placeholder: \"Type a message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"send-btn\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatRoom, \"NGDzoBE+GyciLo32B5gbHpUhOcc=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","ChatRoom","currentUser","selectedRoom","onLogout","_s","message","setMessage","messages","setMessages","unseenMessageId","setUnseenMessageId","chatAreaRef","fetchMessages","response","get","id","data","unseenResponse","length","lastUnseenMessage","post","lastSeenMessageId","headers","error","console","current","unseenMessageElement","document","getElementById","scrollIntoView","behavior","block","handleLogout","put","sendMessage","e","preventDefault","trim","newMessage","user","username","room","label","savedMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","map","msg","index","onSubmit","type","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["D:/sic/sic_front/src/component/ChatRoom.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport './chatroom.css'; // You can style the component as needed\r\n\r\nconst ChatRoom = ({ currentUser, selectedRoom, onLogout }) => {\r\n    const [message, setMessage] = useState('');\r\n    const [messages, setMessages] = useState([]); // Stores all messages\r\n    const [unseenMessageId, setUnseenMessageId] = useState(null); // Store the ID of the first unseen message\r\n\r\n    const chatAreaRef = useRef(null); // To scroll to the first unseen message\r\n\r\n    // Fetch all messages of the current room when the component loads\r\n    useEffect(() => {\r\n        const fetchMessages = async () => {\r\n            try {\r\n                // Fetch all messages for the room\r\n                const response = await axios.get(`http://localhost:8080/message/${selectedRoom.id}`);\r\n                setMessages(response.data); // Update the message list with all messages\r\n\r\n                // Fetch unseen messages and highlight them\r\n                const unseenResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/unseenMessages`);\r\n                if (unseenResponse.data.length > 0) {\r\n                    const lastUnseenMessage = unseenResponse.data[unseenResponse.data.length - 1];\r\n                    setUnseenMessageId(lastUnseenMessage.id);\r\n\r\n                    // Mark all unseen messages as seen\r\n                    await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/lastSeenMessage`, \r\n                        { lastSeenMessageId: lastUnseenMessage.id }, \r\n                        { headers: { 'Content-Type': 'application/json' } });\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching messages:', error);\r\n            }\r\n        };\r\n\r\n        fetchMessages();\r\n    }, [selectedRoom.id, currentUser.id]);\r\n\r\n    // Scroll to the first unseen message when messages change\r\n    useEffect(() => {\r\n        if (unseenMessageId && chatAreaRef.current) {\r\n            const unseenMessageElement = document.getElementById(`message-${unseenMessageId}`);\r\n            if (unseenMessageElement) {\r\n                unseenMessageElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n            }\r\n        }\r\n    }, [unseenMessageId, messages]);\r\n\r\n    const handleLogout = async () => {\r\n        try {\r\n            await axios.put(`http://localhost:8080/join/${currentUser.id}/${selectedRoom.id}`);\r\n            onLogout();\r\n        } catch (error) {\r\n            console.error('Error updating join status:', error);\r\n        }\r\n    };\r\n\r\n    const sendMessage = async (e) => {\r\n        e.preventDefault();\r\n        if (message.trim()) {\r\n            try {\r\n                const newMessage = {\r\n                    message: message,\r\n                    user: { id: currentUser.id, username: currentUser.username },\r\n                    room: { id: selectedRoom.id, label: selectedRoom.label }\r\n                };\r\n        \r\n                const response = await axios.post('http://localhost:8080/message', newMessage);\r\n                const savedMessage = response.data;\r\n                setMessages([...messages, savedMessage]); // Add the new message to the list\r\n                setMessage('');\r\n    \r\n                // Update the last seen message for the current user\r\n                await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/lastSeenMessage`, \r\n                    { lastSeenMessageId: savedMessage.id }, \r\n                    { headers: { 'Content-Type': 'application/json' } });\r\n            } catch (error) {\r\n                console.error('Error sending message:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chatroom-container\">\r\n            <nav className=\"navbar\">\r\n                <span className=\"navbar-user\">Logged in as: {currentUser.username}</span>\r\n                <button className=\"logout-btn\" onClick={handleLogout}>Logout</button>\r\n            </nav>\r\n\r\n            <div className=\"chat-area\" ref={chatAreaRef}>\r\n                <h3>Chatting in: {selectedRoom.label}</h3>\r\n                <div className=\"message-list\">\r\n                    {messages.map((msg, index) => (\r\n                        <div\r\n                            key={index}\r\n                            id={`message-${msg.id}`}\r\n                            className={`message ${unseenMessageId && msg.id > unseenMessageId ? 'unseen-message' : ''}`}>\r\n                            <strong>{msg.user ? msg.user.username : 'Unknown User'}:</strong> {msg.message || ''}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                <form onSubmit={sendMessage} className=\"message-form\">\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"message-input\"\r\n                        value={message}\r\n                        onChange={(e) => setMessage(e.target.value)}\r\n                        placeholder=\"Type a message...\"\r\n                    />\r\n                    <button type=\"submit\" className=\"send-btn\">Send</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}