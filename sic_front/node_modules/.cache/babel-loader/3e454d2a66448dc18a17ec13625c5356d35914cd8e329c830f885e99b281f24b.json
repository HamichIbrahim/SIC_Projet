{"ast":null,"code":"// import React, { useState, useEffect, useRef } from 'react';\n// import axios from 'axios';\n// import Pusher from 'pusher-js';\n// import './chatroom.css';\n// import './ViewerPopup.css'; // Import the CSS for the viewer popup\n// import ViewerPopup from './popup'; // Import the viewer popup component\n\n// import profileImage from './profile.png';\n// import seenIcon from './double-check.png'; // Add a suitable seen icon image for seen messages\n// import multipleSeenIcon from './icons8-select-24.png'; // Add a suitable icon for multiple viewers\n\n// const ChatRoom = ({ currentUser, selectedRoom, onLogout, onleave }) => {\n//     const [message, setMessage] = useState('');\n//     const [messages, setMessages] = useState([]);\n//     const [unseenMessageIds, setUnseenMessageIds] = useState([]);\n//     const [viewers, setViewers] = useState({}); // Store viewers for each message\n//     const [showViewerPopup, setShowViewerPopup] = useState(null); // State to manage visible viewer list\n//     const chatAreaRef = useRef(null);\n//     const endOfMessagesRef = useRef(null); // A ref to track the bottom of the messages\n\n//     const scrollToBottom = () => {\n//         if (endOfMessagesRef.current) {\n//             endOfMessagesRef.current.scrollIntoView({ behavior: 'smooth' });\n//         }\n//     };\n\n//     const scrollToUnseenMessage = (unseenMessages) => {\n//         if (unseenMessages.length > 0) {\n//             const firstUnseenMessageId = unseenMessages[0].id;\n//             const unseenMessageElement = document.getElementById(`message-${firstUnseenMessageId}`);\n//             if (unseenMessageElement) {\n//                 unseenMessageElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n//             }\n//         }\n//     };\n\n//     const fetchMessages = async () => {\n//         try {\n//             const response = await axios.get(`http://localhost:8080/message/${selectedRoom.id}`);\n//             setMessages(response.data);\n\n//             const unseenResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/unseenMessages`);\n//             const unseenMessages = unseenResponse.data;\n\n//             if (unseenMessages.length > 0) {\n//                 setUnseenMessageIds(unseenMessages.map(msg => msg.id));\n//                 await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`, unseenMessages.map(msg => msg.id), { headers: { 'Content-Type': 'application/json' } });\n//                 scrollToUnseenMessage(unseenMessages);\n//             }\n\n//             // Fetch viewers for each message\n//             response.data.forEach(async (msg) => {\n//                 const viewersResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${msg.id}/${currentUser.id}/viewers`);\n//                 setViewers(prevViewers => ({\n//                     ...prevViewers,\n//                     [msg.id]: viewersResponse.data\n//                 }));\n//             });\n\n//             // Scroll to bottom after initial fetch\n//             scrollToBottom();\n//         } catch (error) {\n//             console.error('Error fetching messages:', error);\n//         }\n//     };\n\n//     const markMessageAsSeen = async (messageId) => {\n//         try {\n//             await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`, [messageId], { headers: { 'Content-Type': 'application/json' } });\n//         } catch (error) {\n//             console.error('Error marking message as seen:', error);\n//         }\n//     };\n\n//     useEffect(() => {\n//         if (selectedRoom?.id) {\n//             fetchMessages();\n//             const pusher = new Pusher('92044f12c78ba7ccbfdd', { cluster: 'eu',\n//                 encrypted: true\n//              });\n\n//              const channel = pusher.subscribe(`room-${selectedRoom.id}`);\n//              channel.bind('pusher:subscription_succeeded', () => {\n//                 console.log('Successfully subscribed to channel:', `room-${selectedRoom.id}`);\n//             });\n\n// // Debugging: Log any event coming through the channel\n// channel.bind('new-message', (data) => {\n//     console.log('New message event received:', data);\n//     // Handle the event\n//     setMessages((prevMessages) => [...prevMessages, data]);\n// });\n\n//             // const channel = pusher.subscribe(`room-${selectedRoom.id}`);\n//             // console.log(channel);\n//             //  channel.bind('new-message', async (data) => {\n//             //     console.log('Raw message received from Pusher:', data); // Log raw data\n//             //     let newMessage;\n//             //     try {\n//             //         newMessage = typeof data === 'string' ? JSON.parse(data) : data;\n//             //         console.log('Parsed new message:', newMessage); // Log the parsed message\n//             //     } catch (error) {\n//             //         console.error('Failed to parse message:', error); // Log parsing errors\n//             //         return; // Exit if parsing fails\n//             //     }\n\n//             //     setMessages((prevMessages) => [...prevMessages, newMessage]);\n\n//             //     await markMessageAsSeen(newMessage.id);\n\n//             //     try {\n//             //         const viewersResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${newMessage.id}/${currentUser.id}/viewers`);\n//             //         setViewers(prevViewers => ({\n//             //             ...prevViewers,\n//             //             [newMessage.id]: viewersResponse.data\n//             //         }));\n//             //     } catch (error) {\n//             //         console.error('Error fetching viewers for new message:', error);\n//             //     }\n\n//             //     scrollToBottom();\n//             // });\n\n//             channel.bind('message-seen', (seenData) => {\n//                 console.log(\"yee\");\n//                 const { messageId, viewers } = seenData;\n//                 setViewers(prevViewers => ({\n//                     ...prevViewers,\n//                     [messageId]: viewers // Update the viewers list for the message that was seen\n//                 }));\n//             });\n\n//             return () => {\n//                 pusher.unsubscribe(`room-${selectedRoom.id}`);\n//             };\n//         }\n//     }, [selectedRoom?.id]);\n\n//     const handleLeaveRoom = async () => {\n//         try {\n//             // Update user's active status to leave the room\n//             await axios.put(`http://localhost:8080/join/${currentUser.id}/${selectedRoom.id}`, { isActive: false });\n//             onleave(); // Invoke the onLogout function to return to room selector\n//         } catch (error) {\n//             console.error('Error leaving room:', error);\n//         }\n//     };\n\n//     const sendMessage = async (e) => {\n//         e.preventDefault();\n//         if (message.trim()) {\n//             const newMessage = {\n//                 message: message,\n//                 user: { id: currentUser.id, username: currentUser.username },\n//                 room: { id: selectedRoom.id, label: selectedRoom.label }\n//             };\n\n//             try {\n//                 await axios.post('http://localhost:8080/message', newMessage);\n//                 console.log('Message sent:', newMessage); // Log the sent message\n//                 setMessage(''); // Clear input after sending\n//             } catch (error) {\n//                 console.error('Error sending message:', error);\n//             }\n//         }\n//     };\n\n//     const toggleViewerPopup = (messageId) => {\n//         if (showViewerPopup === messageId) {\n//             setShowViewerPopup(null); // Hide viewer list\n//         } else {\n//             setShowViewerPopup(messageId); // Show viewer list\n//         }\n//     };\n\n//     return (\n//         <div className=\"chatroom-container\">\n//             <nav className=\"navbar\">\n//                 <span>\n//                     <img src={profileImage} alt=\"Avatar\" className=\"avatar\" />\n//                 </span>\n//                 <span className=\"navbar-user\"> {currentUser.username}</span>\n//                 <button className=\"leave-room-btn\" onClick={handleLeaveRoom}>Leave Room</button>\n//             </nav>\n\n//             <div className=\"chat-area\" ref={chatAreaRef}>\n//                 <h3>{selectedRoom.label}</h3>\n//                 <div className=\"message-list\">\n//                     {messages.map((msg) => (\n//                         <div key={msg.id} id={`message-${msg.id}`} className={`message ${msg.user?.id === currentUser?.id ? 'sent' : 'received'}`}>\n//                             <img src={profileImage} alt=\"Avatar\" className=\"avatar\" />\n//                             <div className=\"message-content\">\n//                                 <strong>{msg.user ? msg.user.username : 'Unknown User'}:</strong>\n//                                 <br></br>\n//                                 {msg.message || ''}\n//                             </div>\n\n//                             {msg.user.id === currentUser.id && (\n//                                 <div className=\"message-viewers\" onClick={() => toggleViewerPopup(msg.id)}>\n//                                     {viewers[msg.id]?.length === 0 && (\n//                                         <img src={multipleSeenIcon} alt=\"Not viewed\" className=\"viewer-icon\" title=\"Not viewed\" />\n//                                     )}\n//                                     {viewers[msg.id]?.length >= 1 && (\n//                                         <img src={seenIcon} alt=\"Seen by one\" className=\"viewer-icon\" title=\"Seen by at least one\" />\n//                                     )}\n//                                 </div>\n//                             )}\n//                         </div>\n//                     ))}\n//                     <div ref={endOfMessagesRef}></div> {/* Marker for the end of messages */}\n//                 </div>\n\n//                 <form onSubmit={sendMessage} className=\"message-form\">\n//                     <input\n//                         type=\"text\"\n//                         className=\"message-input\"\n//                         value={message}\n//                         onChange={(e) => setMessage(e.target.value)}\n//                         placeholder=\"Type a message...\"\n//                     />\n//                     <button type=\"submit\" className=\"send-btn\">Send</button>\n//                 </form>\n//             </div>\n\n//             {showViewerPopup && viewers[showViewerPopup] && (\n//                 <ViewerPopup\n//                     viewers={viewers[showViewerPopup]}\n//                     onClose={() => setShowViewerPopup(null)}\n//                 />\n//             )}\n//         </div>\n//     );\n// };\n\n// export default ChatRoom;","map":{"version":3,"names":[],"sources":["D:/sic/sic_front/src/component/ChatRoom.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\r\n// import axios from 'axios';\r\n// import Pusher from 'pusher-js';\r\n// import './chatroom.css';\r\n// import './ViewerPopup.css'; // Import the CSS for the viewer popup\r\n// import ViewerPopup from './popup'; // Import the viewer popup component\r\n\r\n// import profileImage from './profile.png';\r\n// import seenIcon from './double-check.png'; // Add a suitable seen icon image for seen messages\r\n// import multipleSeenIcon from './icons8-select-24.png'; // Add a suitable icon for multiple viewers\r\n\r\n// const ChatRoom = ({ currentUser, selectedRoom, onLogout, onleave }) => {\r\n//     const [message, setMessage] = useState('');\r\n//     const [messages, setMessages] = useState([]);\r\n//     const [unseenMessageIds, setUnseenMessageIds] = useState([]);\r\n//     const [viewers, setViewers] = useState({}); // Store viewers for each message\r\n//     const [showViewerPopup, setShowViewerPopup] = useState(null); // State to manage visible viewer list\r\n//     const chatAreaRef = useRef(null);\r\n//     const endOfMessagesRef = useRef(null); // A ref to track the bottom of the messages\r\n\r\n//     const scrollToBottom = () => {\r\n//         if (endOfMessagesRef.current) {\r\n//             endOfMessagesRef.current.scrollIntoView({ behavior: 'smooth' });\r\n//         }\r\n//     };\r\n\r\n//     const scrollToUnseenMessage = (unseenMessages) => {\r\n//         if (unseenMessages.length > 0) {\r\n//             const firstUnseenMessageId = unseenMessages[0].id;\r\n//             const unseenMessageElement = document.getElementById(`message-${firstUnseenMessageId}`);\r\n//             if (unseenMessageElement) {\r\n//                 unseenMessageElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     const fetchMessages = async () => {\r\n//         try {\r\n//             const response = await axios.get(`http://localhost:8080/message/${selectedRoom.id}`);\r\n//             setMessages(response.data);\r\n\r\n//             const unseenResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/unseenMessages`);\r\n//             const unseenMessages = unseenResponse.data;\r\n\r\n//             if (unseenMessages.length > 0) {\r\n//                 setUnseenMessageIds(unseenMessages.map(msg => msg.id));\r\n//                 await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`, unseenMessages.map(msg => msg.id), { headers: { 'Content-Type': 'application/json' } });\r\n//                 scrollToUnseenMessage(unseenMessages);\r\n//             }\r\n\r\n//             // Fetch viewers for each message\r\n//             response.data.forEach(async (msg) => {\r\n//                 const viewersResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${msg.id}/${currentUser.id}/viewers`);\r\n//                 setViewers(prevViewers => ({\r\n//                     ...prevViewers,\r\n//                     [msg.id]: viewersResponse.data\r\n//                 }));\r\n//             });\r\n\r\n//             // Scroll to bottom after initial fetch\r\n//             scrollToBottom();\r\n//         } catch (error) {\r\n//             console.error('Error fetching messages:', error);\r\n//         }\r\n//     };\r\n\r\n//     const markMessageAsSeen = async (messageId) => {\r\n//         try {\r\n//             await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`, [messageId], { headers: { 'Content-Type': 'application/json' } });\r\n//         } catch (error) {\r\n//             console.error('Error marking message as seen:', error);\r\n//         }\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         if (selectedRoom?.id) {\r\n//             fetchMessages();\r\n//             const pusher = new Pusher('92044f12c78ba7ccbfdd', { cluster: 'eu',\r\n//                 encrypted: true\r\n//              });\r\n\r\n\r\n//              const channel = pusher.subscribe(`room-${selectedRoom.id}`);\r\n//              channel.bind('pusher:subscription_succeeded', () => {\r\n//                 console.log('Successfully subscribed to channel:', `room-${selectedRoom.id}`);\r\n//             });\r\n\r\n// // Debugging: Log any event coming through the channel\r\n// channel.bind('new-message', (data) => {\r\n//     console.log('New message event received:', data);\r\n//     // Handle the event\r\n//     setMessages((prevMessages) => [...prevMessages, data]);\r\n// });\r\n\r\n\r\n//             // const channel = pusher.subscribe(`room-${selectedRoom.id}`);\r\n//             // console.log(channel);\r\n//             //  channel.bind('new-message', async (data) => {\r\n//             //     console.log('Raw message received from Pusher:', data); // Log raw data\r\n//             //     let newMessage;\r\n//             //     try {\r\n//             //         newMessage = typeof data === 'string' ? JSON.parse(data) : data;\r\n//             //         console.log('Parsed new message:', newMessage); // Log the parsed message\r\n//             //     } catch (error) {\r\n//             //         console.error('Failed to parse message:', error); // Log parsing errors\r\n//             //         return; // Exit if parsing fails\r\n//             //     }\r\n            \r\n//             //     setMessages((prevMessages) => [...prevMessages, newMessage]);\r\n            \r\n//             //     await markMessageAsSeen(newMessage.id);\r\n                \r\n//             //     try {\r\n//             //         const viewersResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${newMessage.id}/${currentUser.id}/viewers`);\r\n//             //         setViewers(prevViewers => ({\r\n//             //             ...prevViewers,\r\n//             //             [newMessage.id]: viewersResponse.data\r\n//             //         }));\r\n//             //     } catch (error) {\r\n//             //         console.error('Error fetching viewers for new message:', error);\r\n//             //     }\r\n            \r\n//             //     scrollToBottom();\r\n//             // });\r\n            \r\n\r\n            \r\n            \r\n            \r\n\r\n//             channel.bind('message-seen', (seenData) => {\r\n//                 console.log(\"yee\");\r\n//                 const { messageId, viewers } = seenData;\r\n//                 setViewers(prevViewers => ({\r\n//                     ...prevViewers,\r\n//                     [messageId]: viewers // Update the viewers list for the message that was seen\r\n//                 }));\r\n//             });\r\n\r\n//             return () => {\r\n//                 pusher.unsubscribe(`room-${selectedRoom.id}`);\r\n//             };\r\n//         }\r\n//     }, [selectedRoom?.id]);\r\n\r\n//     const handleLeaveRoom = async () => {\r\n//         try {\r\n//             // Update user's active status to leave the room\r\n//             await axios.put(`http://localhost:8080/join/${currentUser.id}/${selectedRoom.id}`, { isActive: false });\r\n//             onleave(); // Invoke the onLogout function to return to room selector\r\n//         } catch (error) {\r\n//             console.error('Error leaving room:', error);\r\n//         }\r\n//     };\r\n\r\n//     const sendMessage = async (e) => {\r\n//         e.preventDefault();\r\n//         if (message.trim()) {\r\n//             const newMessage = {\r\n//                 message: message,\r\n//                 user: { id: currentUser.id, username: currentUser.username },\r\n//                 room: { id: selectedRoom.id, label: selectedRoom.label }\r\n//             };\r\n    \r\n//             try {\r\n//                 await axios.post('http://localhost:8080/message', newMessage);\r\n//                 console.log('Message sent:', newMessage); // Log the sent message\r\n//                 setMessage(''); // Clear input after sending\r\n//             } catch (error) {\r\n//                 console.error('Error sending message:', error);\r\n//             }\r\n//         }\r\n//     };\r\n    \r\n\r\n//     const toggleViewerPopup = (messageId) => {\r\n//         if (showViewerPopup === messageId) {\r\n//             setShowViewerPopup(null); // Hide viewer list\r\n//         } else {\r\n//             setShowViewerPopup(messageId); // Show viewer list\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"chatroom-container\">\r\n//             <nav className=\"navbar\">\r\n//                 <span>\r\n//                     <img src={profileImage} alt=\"Avatar\" className=\"avatar\" />\r\n//                 </span>\r\n//                 <span className=\"navbar-user\"> {currentUser.username}</span>\r\n//                 <button className=\"leave-room-btn\" onClick={handleLeaveRoom}>Leave Room</button>\r\n//             </nav>\r\n\r\n//             <div className=\"chat-area\" ref={chatAreaRef}>\r\n//                 <h3>{selectedRoom.label}</h3>\r\n//                 <div className=\"message-list\">\r\n//                     {messages.map((msg) => (\r\n//                         <div key={msg.id} id={`message-${msg.id}`} className={`message ${msg.user?.id === currentUser?.id ? 'sent' : 'received'}`}>\r\n//                             <img src={profileImage} alt=\"Avatar\" className=\"avatar\" />\r\n//                             <div className=\"message-content\">\r\n//                                 <strong>{msg.user ? msg.user.username : 'Unknown User'}:</strong>\r\n//                                 <br></br>\r\n//                                 {msg.message || ''}\r\n//                             </div>\r\n\r\n//                             {msg.user.id === currentUser.id && (\r\n//                                 <div className=\"message-viewers\" onClick={() => toggleViewerPopup(msg.id)}>\r\n//                                     {viewers[msg.id]?.length === 0 && (\r\n//                                         <img src={multipleSeenIcon} alt=\"Not viewed\" className=\"viewer-icon\" title=\"Not viewed\" />\r\n//                                     )}\r\n//                                     {viewers[msg.id]?.length >= 1 && (\r\n//                                         <img src={seenIcon} alt=\"Seen by one\" className=\"viewer-icon\" title=\"Seen by at least one\" />\r\n//                                     )}\r\n//                                 </div>\r\n//                             )}\r\n//                         </div>\r\n//                     ))}\r\n//                     <div ref={endOfMessagesRef}></div> {/* Marker for the end of messages */}\r\n//                 </div>\r\n\r\n//                 <form onSubmit={sendMessage} className=\"message-form\">\r\n//                     <input\r\n//                         type=\"text\"\r\n//                         className=\"message-input\"\r\n//                         value={message}\r\n//                         onChange={(e) => setMessage(e.target.value)}\r\n//                         placeholder=\"Type a message...\"\r\n//                     />\r\n//                     <button type=\"submit\" className=\"send-btn\">Send</button>\r\n//                 </form>\r\n//             </div>\r\n\r\n//             {showViewerPopup && viewers[showViewerPopup] && (\r\n//                 <ViewerPopup\r\n//                     viewers={viewers[showViewerPopup]}\r\n//                     onClose={() => setShowViewerPopup(null)}\r\n//                 />\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default ChatRoom;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}