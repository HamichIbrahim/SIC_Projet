{"ast":null,"code":"var _jsxFileName = \"C:\\\\SIC_Projet\\\\sic_front\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport Login from './component/Login';\nimport Signup from './component/Signup';\nimport ChatRoomSelector from './component/Room';\nimport ChatRoom from './component/ChatRoom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(() => {\n    const storedUser = localStorage.getItem('currentUser');\n    return storedUser ? JSON.parse(storedUser) : null;\n  });\n  const [selectedRoom, setSelectedRoom] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(() => {\n    const token = localStorage.getItem('token');\n    return !!token;\n  });\n  useEffect(() => {\n    // Check for updates in authentication status on every render\n    const token = localStorage.getItem('token');\n    setIsAuthenticated(!!token); // Set isAuthenticated based on the presence of token\n  }, [currentUser]);\n  const handleLogout = () => {\n    setCurrentUser(null); // Clear current user on logout\n    setIsAuthenticated(false); // Update auth state\n    localStorage.removeItem('token'); // Clear the token\n    localStorage.removeItem('currentUser'); // Clear currentUser\n  };\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/login\",\n        element: isAuthenticated ? /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/chatrooms\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(Login, {\n          setCurrentUser: setCurrentUser,\n          setIsAuthenticated: setIsAuthenticated\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/singup\",\n        element: isAuthenticated ? /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/chatrooms\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(Signup, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Navigate, {\n          to: isAuthenticated ? \"/chatrooms\" : \"/login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 42\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/signup\",\n        element: /*#__PURE__*/_jsxDEV(Signup, {\n          setCurrentUser: setCurrentUser,\n          setIsAuthenticated: setIsAuthenticated\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 48\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/chatrooms\",\n        element: isAuthenticated ? /*#__PURE__*/_jsxDEV(ChatRoomSelector, {\n          currentUser: currentUser,\n          setSelectedRoom: setSelectedRoom\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/chatroom/:roomId\",\n        element: isAuthenticated ? /*#__PURE__*/_jsxDEV(ChatRoom, {\n          currentUser: currentUser,\n          selectedRoom: selectedRoom,\n          onLogout: handleLogout,\n          onLeave: () => setSelectedRoom(null)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"*\",\n        element: /*#__PURE__*/_jsxDEV(Navigate, {\n          to: isAuthenticated ? \"/chatrooms\" : \"/login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 42\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"JdYnqW0utay3swLtmsaaDra1ZEk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","Navigate","Login","Signup","ChatRoomSelector","ChatRoom","jsxDEV","_jsxDEV","App","_s","currentUser","setCurrentUser","storedUser","localStorage","getItem","JSON","parse","selectedRoom","setSelectedRoom","isAuthenticated","setIsAuthenticated","token","handleLogout","removeItem","children","path","element","to","fileName","_jsxFileName","lineNumber","columnNumber","onLogout","onLeave","_c","$RefreshReg$"],"sources":["C:/SIC_Projet/sic_front/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport Login from './component/Login';\nimport Signup from './component/Signup';\nimport ChatRoomSelector from './component/Room';\nimport ChatRoom from './component/ChatRoom';\n\nconst App = () => {\n    const [currentUser, setCurrentUser] = useState(() => {\n        const storedUser = localStorage.getItem('currentUser');\n        return storedUser ? JSON.parse(storedUser) : null;\n    });\n\n    const [selectedRoom, setSelectedRoom] = useState(null);\n    const [isAuthenticated, setIsAuthenticated] = useState(() => {\n        const token = localStorage.getItem('token');\n        return !!token;\n    });\n\n    useEffect(() => {\n        // Check for updates in authentication status on every render\n        const token = localStorage.getItem('token');\n        setIsAuthenticated(!!token); // Set isAuthenticated based on the presence of token\n    }, [currentUser]);\n\n    const handleLogout = () => {\n        setCurrentUser(null); // Clear current user on logout\n        setIsAuthenticated(false); // Update auth state\n        localStorage.removeItem('token'); // Clear the token\n        localStorage.removeItem('currentUser'); // Clear currentUser\n    };\n\n    return (\n        <Router>\n            <Routes>\n                {/* Route for login, redirecting to chatrooms if already authenticated */}\n                <Route \n                    path=\"/login\" \n                    element={\n                        isAuthenticated ? (\n                            <Navigate to=\"/chatrooms\" />\n                        ) : (\n                            <Login setCurrentUser={setCurrentUser} setIsAuthenticated={setIsAuthenticated} />\n                           \n                        )\n                    } \n                />\n{\n<Route \n                    path=\"/singup\" \n                    element={\n                        isAuthenticated ? (\n                            <Navigate to=\"/chatrooms\" />\n                        ) : (\n                            <Signup/>\n                        )\n                    } \n                />}\n\n\n                {/* Default route redirects to login if not authenticated */}\n                <Route path=\"/\" element={<Navigate to={isAuthenticated ? \"/chatrooms\" : \"/login\"} />} />\n\n                {/* Route for signup */}\n                <Route path=\"/signup\" element={<Signup setCurrentUser={setCurrentUser} setIsAuthenticated={setIsAuthenticated} />} />\n\n                {/* Route for chat room selection, protected by authentication */}\n                <Route \n                    path=\"/chatrooms\" \n                    element={\n                        isAuthenticated ? (\n                            <ChatRoomSelector \n                                currentUser={currentUser}\n                                setSelectedRoom={setSelectedRoom}\n                            />\n                        ) : (\n                            <Navigate to=\"/login\" />\n                        )\n                    } \n                />\n\n                {/* Route for specific chat room, protected by authentication */}\n                <Route \n                    path=\"/chatroom/:roomId\" \n                    element={\n                        isAuthenticated ? (\n                            <ChatRoom\n                                currentUser={currentUser}\n                                selectedRoom={selectedRoom}\n                                onLogout={handleLogout}\n                                onLeave={() => setSelectedRoom(null)}\n                            />\n                        ) : (\n                            <Navigate to=\"/login\" />\n                        )\n                    } \n                />\n\n                {/* Redirect if authenticated */}\n                <Route path=\"*\" element={<Navigate to={isAuthenticated ? \"/chatrooms\" : \"/login\"} />} />\n            </Routes>\n        </Router>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}