{"ast":null,"code":"var _jsxFileName = \"D:\\\\sic\\\\sic_front\\\\src\\\\component\\\\Room.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import './room.css';\n// import ChatRoom from './ChatRoom';\n// import './chatroom.css';\n\n// const ChatRoomSelector = ({ currentUser}) => {\n//     const [chatRooms, setChatRooms] = useState([]);\n//     const [selectedRoom, setSelectedRoom] = useState(null);\n//     const [showCreateRoomForm, setShowCreateRoomForm] = useState(false);\n//     const [newRoomLabel, setNewRoomLabel] = useState('');\n//     const [newRoomPrivacy, setNewRoomPrivacy] = useState('public');\n//     const [isEditing, setIsEditing] = useState(false);\n//     const [editedRoomId, setEditedRoomId] = useState(null);\n\n//     useEffect(() => {\n\n//         const fetchChatRooms = async () => {\n//             try {\n//                 const token = localStorage.getItem('token'); // Retrieve the token\n//                 console.log(token);\n//                 const response = await axios.get('http://localhost:8080/api/v1/rooms', {\n//                     headers: {\n//                         Authorization: `Bearer ${token}`,  // Add the token to the headers\n//                     },\n//                 });\n//                 setChatRooms(response.data);\n//             } catch (error) {\n//                 console.error('Error fetching chat rooms:', error);\n//             }\n//         };\n//         fetchChatRooms();\n//     }, []);\n\n//     const markUserAsInactive = async (roomId) => {\n//         try {\n//             const token = localStorage.getItem('token'); // Retrieve the token\n//             await axios.put(`http://localhost:8080/join/${currentUser.id}/${roomId}`, {}, {\n//                 headers: {\n//                     Authorization: `Bearer ${token}`, // Add the token to the headers\n//                 },\n//             });\n//         } catch (error) {\n//             console.error('Error marking user as inactive:', error);\n//         }\n//     };\n\n//     const handleJoinRoom = async (room) => {\n//         if (selectedRoom) {\n//             await markUserAsInactive(selectedRoom.id);\n//         }\n\n//         try {\n//             const token = localStorage.getItem('token'); // Retrieve the token\n//             console.log(currentUser.id);\n//             const joinResponse = await axios.post('http://localhost:8080/join', {\n//                 userId: currentUser.id,\n//                 roomId: room.id,\n//             }, {\n//                 headers: {\n//                     Authorization: `Bearer ${token}`, // Add the token to the headers\n//                 },\n//             });\n\n//             if (joinResponse.status === 200) {\n//                 setSelectedRoom(room);\n//             } else {\n//                 console.error('Failed to join the room');\n//             }\n//         } catch (error) {\n//             console.error('Error joining room:', error);\n//         }\n//     };\n\n//     const handleLeave = async () => {\n//         setSelectedRoom(null);\n//         if (selectedRoom) {\n//             await markUserAsInactive(selectedRoom.id);\n//         }  \n//     };\n\n//     const handleLogout = async () => {\n//         if (selectedRoom) {\n//             await markUserAsInactive(selectedRoom.id);\n//         }\n//         setSelectedRoom(null);\n//         localStorage.removeItem('currentUser');\n//         localStorage.removeItem('token'); // Remove the token on logout\n//         window.location.reload();\n//     };\n\n//     const handleCreateRoom = async () => {\n//         try {\n//             const token = localStorage.getItem('token'); // Retrieve the token\n//             const createRoomResponse = await axios.post('http://localhost:8080/api/v1/rooms/create', {\n//                 label: newRoomLabel,\n//                 createdBy: { id: currentUser.id, username: currentUser.username },\n//                 isPrivate: newRoomPrivacy === 'private',\n//             }, {\n//                 headers: {\n//                     Authorization: `Bearer ${token}`, // Add the token to the headers\n//                 },\n//             });\n//             if (createRoomResponse.status === 201) {\n//                 setChatRooms([...chatRooms, createRoomResponse.data]);\n//                 setShowCreateRoomForm(false);\n//                 setNewRoomLabel('');\n//                 setNewRoomPrivacy('public');\n//             }\n//         } catch (error) {\n//             console.error('Error creating room:', error);\n//         }\n//     };\n\n//     const handleEditRoom = (room) => {\n//         setIsEditing(true);\n//         setEditedRoomId(room.id);\n//         setNewRoomLabel(room.label);\n//         setNewRoomPrivacy(room.isPrivate ? 'private' : 'public');\n//         setShowCreateRoomForm(true);\n//     };\n\n//     const handleSaveEditedRoom = async () => {\n//         try {\n//             const token = localStorage.getItem('token'); // Retrieve the token\n//             const editRoomResponse = await axios.put(`http://localhost:8080/api/v1/rooms/${editedRoomId}`, {\n//                 label: newRoomLabel,\n//                 createdBy: { id: currentUser.id, username: currentUser.username },\n//                 isPrivate: newRoomPrivacy === 'private',\n//             }, {\n//                 headers: {\n//                     Authorization: `Bearer ${token}`, // Add the token to the headers\n//                 },\n//             });\n//             if (editRoomResponse.status === 200) {\n//                 const updatedRooms = chatRooms.map(room =>\n//                     room.id === editedRoomId ? editRoomResponse.data : room\n//                 );\n//                 setChatRooms(updatedRooms);\n//                 setShowCreateRoomForm(false);\n//                 setIsEditing(false);\n//                 setNewRoomLabel('');\n//                 setNewRoomPrivacy('public');\n//             }\n//         } catch (error) {\n//             console.error('Error editing room:', error);\n//         }\n//     };\n\n//     const handleDeleteRoom = async (roomId) => {\n//         try {\n//             const token = localStorage.getItem('token'); // Retrieve the token\n//             await axios.delete(`http://localhost:8080/api/v1/rooms/${roomId}`, {\n//                 headers: {\n//                     Authorization: `Bearer ${token}`, // Add the token to the headers\n//                 },\n//             });\n//             setChatRooms(chatRooms.filter(room => room.id !== roomId));\n//         } catch (error) {\n//             console.error('Error deleting room:', error);\n//         }\n//     };\n\n//     return (\n//         <div className=\"chat-container\">\n//             <div className=\"chat-room-selector\">\n//                 <div className=\"user-info\">\n//                     <h2>{currentUser.username}</h2>\n//                     <button className=\"btn btn-danger\" onClick={handleLogout}>Logout</button>\n//                 </div>\n//                 <h2>Rooms</h2>\n//                 <div className=\"chat-room-list\">\n//                 {chatRooms.map((room) => (\n//                     <div key={room.id} onClick={() => handleJoinRoom(room)} className=\"chat-room\">\n//                         <span>{room.label}</span>\n//                         {room.createdBy && room.createdBy.id === currentUser.id && (\n//                         <div className=\"room-management\" onClick={(e) => e.stopPropagation()}>\n//                             <button className=\"manage-button\">â‹®</button>\n//                             <div className=\"management-options\">\n//                             <button onClick={(e) => { e.stopPropagation(); handleEditRoom(room); }}>Edit</button>\n//                             <button onClick={(e) => { e.stopPropagation(); handleDeleteRoom(room.id); }}>Delete</button>\n//                             </div>\n//                         </div>\n//                         )}\n//                     </div>\n//                     ))}\n//                     <div>\n//                         <button className=\"create-room\" onClick={() => setShowCreateRoomForm(true)}>Create New Room</button>\n//                     </div>\n//                 </div>\n//             </div>\n//             <div className=\"chat-room-display\">\n//                 {selectedRoom ? (\n//                     <ChatRoom currentUser={currentUser} selectedRoom={selectedRoom} onLogout={handleLogout} onLeave={handleLeave}/>\n//                 ) : (\n//                     <div className=\"chat-area\">\n//                         <h3>Select a room to start chatting.</h3>\n//                     </div>\n//                 )}\n//             </div>\n\n//             {showCreateRoomForm && (\n//                 <div className=\"create-room-popup\">\n//                     <div className=\"create-room-form\">\n//                         <h3>{isEditing ? 'Edit Room' : 'Create a New Room'}</h3>\n//                         <label>Room Label:</label>\n//                         <input\n//                             type=\"text\"\n//                             value={newRoomLabel}\n//                             onChange={(e) => setNewRoomLabel(e.target.value)}\n//                         />\n//                         <label>Privacy:</label>\n//                         <select\n//                             value={newRoomPrivacy}\n//                             onChange={(e) => setNewRoomPrivacy(e.target.value)}\n//                         >\n//                             <option value=\"public\">Public</option>\n//                             <option value=\"private\">Private</option>\n//                         </select>\n//                         <div className=\"form-buttons\">\n//                             <button onClick={isEditing ? handleSaveEditedRoom : handleCreateRoom}>\n//                                 {isEditing ? 'Save' : 'Create'}\n//                             </button>\n//                             <button onClick={() => {\n//                                 setShowCreateRoomForm(false);\n//                                 setIsEditing(false);\n//                                 setNewRoomLabel('');\n//                                 setNewRoomPrivacy('public');\n//                             }}>Cancel</button>\n//                         </div>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default ChatRoomSelector;\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './room.css';\nimport ChatRoom from './ChatRoom';\nimport './chatroom.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoomSelector = () => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [chatRooms, setChatRooms] = useState([]);\n  const [selectedRoom, setSelectedRoom] = useState(null);\n  const [showCreateRoomForm, setShowCreateRoomForm] = useState(false);\n  const [newRoomLabel, setNewRoomLabel] = useState('');\n  const [newRoomPrivacy, setNewRoomPrivacy] = useState('public');\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedRoomId, setEditedRoomId] = useState(null);\n\n  // Fetch currentUser from localStorage\n  useEffect(() => {\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      setCurrentUser(JSON.parse(storedUser));\n    }\n  }, []);\n  useEffect(() => {\n    const fetchChatRooms = async () => {\n      try {\n        const token = localStorage.getItem('token'); // Retrieve the token\n        const response = await axios.get('http://localhost:8080/api/v1/rooms', {\n          headers: {\n            Authorization: `Bearer ${token}` // Add the token to the headers\n          }\n        });\n        setChatRooms(response.data);\n      } catch (error) {\n        console.error('Error fetching chat rooms:', error);\n      }\n    };\n    fetchChatRooms();\n  }, []);\n  const markUserAsInactive = async roomId => {\n    try {\n      const token = localStorage.getItem('token'); // Retrieve the token\n      await axios.put(`http://localhost:8080/join/${currentUser.id}/${roomId}`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}` // Add the token to the headers\n        }\n      });\n    } catch (error) {\n      console.error('Error marking user as inactive:', error);\n    }\n  };\n  const handleJoinRoom = async room => {\n    if (selectedRoom) {\n      await markUserAsInactive(selectedRoom.id);\n    }\n    try {\n      const token = localStorage.getItem('token'); // Retrieve the token\n      const joinResponse = await axios.post('http://localhost:8080/join', {\n        userId: currentUser.id,\n        roomId: room.id\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}` // Add the token to the headers\n        }\n      });\n      if (joinResponse.status === 200) {\n        selectedRoom(room);\n        localStorage.setItem('room', JSON.stringify(room));\n      } else {\n        console.error('Failed to join the room');\n      }\n    } catch (error) {\n      console.error('Error joining room:', error);\n    }\n  };\n  const handleLeave = async () => {\n    setSelectedRoom(null);\n    if (selectedRoom) {\n      await markUserAsInactive(selectedRoom.id);\n    }\n  };\n  const handleLogout = async () => {\n    if (selectedRoom) {\n      await markUserAsInactive(selectedRoom.id);\n    }\n    setSelectedRoom(null);\n    localStorage.removeItem('currentUser');\n    localStorage.removeItem('token'); // Remove the token on logout\n    window.location.reload();\n  };\n  const handleCreateRoom = async () => {\n    try {\n      const token = localStorage.getItem('token'); // Retrieve the token\n      const createRoomResponse = await axios.post('http://localhost:8080/api/v1/rooms/create', {\n        label: newRoomLabel,\n        createdBy: {\n          id: currentUser.id,\n          username: currentUser.username\n        },\n        isPrivate: newRoomPrivacy === 'private'\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}` // Add the token to the headers\n        }\n      });\n      if (createRoomResponse.status === 201) {\n        setChatRooms([...chatRooms, createRoomResponse.data]);\n        setShowCreateRoomForm(false);\n        setNewRoomLabel('');\n        setNewRoomPrivacy('public');\n      }\n    } catch (error) {\n      console.error('Error creating room:', error);\n    }\n  };\n  const handleEditRoom = room => {\n    setIsEditing(true);\n    setEditedRoomId(room.id);\n    setNewRoomLabel(room.label);\n    setNewRoomPrivacy(room.isPrivate ? 'private' : 'public');\n    setShowCreateRoomForm(true);\n  };\n  const handleSaveEditedRoom = async () => {\n    try {\n      const token = localStorage.getItem('token'); // Retrieve the token\n      const editRoomResponse = await axios.put(`http://localhost:8080/api/v1/rooms/${editedRoomId}`, {\n        label: newRoomLabel,\n        createdBy: {\n          id: currentUser.id,\n          username: currentUser.username\n        },\n        isPrivate: newRoomPrivacy === 'private'\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}` // Add the token to the headers\n        }\n      });\n      if (editRoomResponse.status === 200) {\n        const updatedRooms = chatRooms.map(room => room.id === editedRoomId ? editRoomResponse.data : room);\n        setChatRooms(updatedRooms);\n        setShowCreateRoomForm(false);\n        setIsEditing(false);\n        setNewRoomLabel('');\n        setNewRoomPrivacy('public');\n      }\n    } catch (error) {\n      console.error('Error editing room:', error);\n    }\n  };\n  const handleDeleteRoom = async roomId => {\n    try {\n      const token = localStorage.getItem('token'); // Retrieve the token\n      await axios.delete(`http://localhost:8080/api/v1/rooms/${roomId}`, {\n        headers: {\n          Authorization: `Bearer ${token}` // Add the token to the headers\n        }\n      });\n      setChatRooms(chatRooms.filter(room => room.id !== roomId));\n    } catch (error) {\n      console.error('Error deleting room:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-room-selector\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: currentUser === null || currentUser === void 0 ? void 0 : currentUser.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-danger\",\n          onClick: handleLogout,\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Rooms\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-room-list\",\n        children: [chatRooms.map(room => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => handleJoinRoom(room),\n          className: \"chat-room\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: room.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 29\n          }, this), room.createdBy && room.createdBy.id === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id) && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"room-management\",\n            onClick: e => e.stopPropagation(),\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"manage-button\",\n              children: \"\\u22EE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"management-options\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: e => {\n                  e.stopPropagation();\n                  handleEditRoom(room);\n                },\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 425,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: e => {\n                  e.stopPropagation();\n                  handleDeleteRoom(room.id);\n                },\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 426,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 33\n          }, this)]\n        }, room.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"create-room\",\n            onClick: () => setShowCreateRoomForm(true),\n            children: \"Create New Room\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-room-display\",\n      children: selectedRoom ? /*#__PURE__*/_jsxDEV(ChatRoom, {\n        currentUser: currentUser,\n        selectedRoom: selectedRoom,\n        onLogout: handleLogout,\n        onLeave: handleLeave\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-area\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Select a room to start chatting.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 13\n    }, this), showCreateRoomForm && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create-room-popup\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"create-room-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: isEditing ? 'Edit Room' : 'Create a New Room'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Room Label:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newRoomLabel,\n          onChange: e => setNewRoomLabel(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Privacy:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: newRoomPrivacy,\n          onChange: e => setNewRoomPrivacy(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"public\",\n            children: \"Public\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"private\",\n            children: \"Private\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: isEditing ? handleSaveEditedRoom : handleCreateRoom,\n            children: isEditing ? 'Save' : 'Create'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setShowCreateRoomForm(false);\n              setIsEditing(false);\n              setNewRoomLabel('');\n              setNewRoomPrivacy('public');\n            },\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 410,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatRoomSelector, \"36AlyEYc1DYE34wiyWKcdcw55hM=\");\n_c = ChatRoomSelector;\nexport default ChatRoomSelector;\nvar _c;\n$RefreshReg$(_c, \"ChatRoomSelector\");","map":{"version":3,"names":["React","useState","useEffect","axios","ChatRoom","jsxDEV","_jsxDEV","ChatRoomSelector","_s","currentUser","setCurrentUser","chatRooms","setChatRooms","selectedRoom","setSelectedRoom","showCreateRoomForm","setShowCreateRoomForm","newRoomLabel","setNewRoomLabel","newRoomPrivacy","setNewRoomPrivacy","isEditing","setIsEditing","editedRoomId","setEditedRoomId","storedUser","localStorage","getItem","JSON","parse","fetchChatRooms","token","response","get","headers","Authorization","data","error","console","markUserAsInactive","roomId","put","id","handleJoinRoom","room","joinResponse","post","userId","status","setItem","stringify","handleLeave","handleLogout","removeItem","window","location","reload","handleCreateRoom","createRoomResponse","label","createdBy","username","isPrivate","handleEditRoom","handleSaveEditedRoom","editRoomResponse","updatedRooms","map","handleDeleteRoom","delete","filter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","e","stopPropagation","onLogout","onLeave","type","value","onChange","target","_c","$RefreshReg$"],"sources":["D:/sic/sic_front/src/component/Room.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import './room.css';\r\n// import ChatRoom from './ChatRoom';\r\n// import './chatroom.css';\r\n\r\n// const ChatRoomSelector = ({ currentUser}) => {\r\n//     const [chatRooms, setChatRooms] = useState([]);\r\n//     const [selectedRoom, setSelectedRoom] = useState(null);\r\n//     const [showCreateRoomForm, setShowCreateRoomForm] = useState(false);\r\n//     const [newRoomLabel, setNewRoomLabel] = useState('');\r\n//     const [newRoomPrivacy, setNewRoomPrivacy] = useState('public');\r\n//     const [isEditing, setIsEditing] = useState(false);\r\n//     const [editedRoomId, setEditedRoomId] = useState(null);\r\n\r\n//     useEffect(() => {\r\n        \r\n//         const fetchChatRooms = async () => {\r\n//             try {\r\n//                 const token = localStorage.getItem('token'); // Retrieve the token\r\n//                 console.log(token);\r\n//                 const response = await axios.get('http://localhost:8080/api/v1/rooms', {\r\n//                     headers: {\r\n//                         Authorization: `Bearer ${token}`,  // Add the token to the headers\r\n//                     },\r\n//                 });\r\n//                 setChatRooms(response.data);\r\n//             } catch (error) {\r\n//                 console.error('Error fetching chat rooms:', error);\r\n//             }\r\n//         };\r\n//         fetchChatRooms();\r\n//     }, []);\r\n\r\n//     const markUserAsInactive = async (roomId) => {\r\n//         try {\r\n//             const token = localStorage.getItem('token'); // Retrieve the token\r\n//             await axios.put(`http://localhost:8080/join/${currentUser.id}/${roomId}`, {}, {\r\n//                 headers: {\r\n//                     Authorization: `Bearer ${token}`, // Add the token to the headers\r\n//                 },\r\n//             });\r\n//         } catch (error) {\r\n//             console.error('Error marking user as inactive:', error);\r\n//         }\r\n//     };\r\n\r\n//     const handleJoinRoom = async (room) => {\r\n//         if (selectedRoom) {\r\n//             await markUserAsInactive(selectedRoom.id);\r\n//         }\r\n\r\n//         try {\r\n//             const token = localStorage.getItem('token'); // Retrieve the token\r\n//             console.log(currentUser.id);\r\n//             const joinResponse = await axios.post('http://localhost:8080/join', {\r\n//                 userId: currentUser.id,\r\n//                 roomId: room.id,\r\n//             }, {\r\n//                 headers: {\r\n//                     Authorization: `Bearer ${token}`, // Add the token to the headers\r\n//                 },\r\n//             });\r\n\r\n//             if (joinResponse.status === 200) {\r\n//                 setSelectedRoom(room);\r\n//             } else {\r\n//                 console.error('Failed to join the room');\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Error joining room:', error);\r\n//         }\r\n//     };\r\n\r\n//     const handleLeave = async () => {\r\n//         setSelectedRoom(null);\r\n//         if (selectedRoom) {\r\n//             await markUserAsInactive(selectedRoom.id);\r\n//         }  \r\n//     };\r\n\r\n//     const handleLogout = async () => {\r\n//         if (selectedRoom) {\r\n//             await markUserAsInactive(selectedRoom.id);\r\n//         }\r\n//         setSelectedRoom(null);\r\n//         localStorage.removeItem('currentUser');\r\n//         localStorage.removeItem('token'); // Remove the token on logout\r\n//         window.location.reload();\r\n//     };\r\n\r\n//     const handleCreateRoom = async () => {\r\n//         try {\r\n//             const token = localStorage.getItem('token'); // Retrieve the token\r\n//             const createRoomResponse = await axios.post('http://localhost:8080/api/v1/rooms/create', {\r\n//                 label: newRoomLabel,\r\n//                 createdBy: { id: currentUser.id, username: currentUser.username },\r\n//                 isPrivate: newRoomPrivacy === 'private',\r\n//             }, {\r\n//                 headers: {\r\n//                     Authorization: `Bearer ${token}`, // Add the token to the headers\r\n//                 },\r\n//             });\r\n//             if (createRoomResponse.status === 201) {\r\n//                 setChatRooms([...chatRooms, createRoomResponse.data]);\r\n//                 setShowCreateRoomForm(false);\r\n//                 setNewRoomLabel('');\r\n//                 setNewRoomPrivacy('public');\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Error creating room:', error);\r\n//         }\r\n//     };\r\n\r\n//     const handleEditRoom = (room) => {\r\n//         setIsEditing(true);\r\n//         setEditedRoomId(room.id);\r\n//         setNewRoomLabel(room.label);\r\n//         setNewRoomPrivacy(room.isPrivate ? 'private' : 'public');\r\n//         setShowCreateRoomForm(true);\r\n//     };\r\n\r\n//     const handleSaveEditedRoom = async () => {\r\n//         try {\r\n//             const token = localStorage.getItem('token'); // Retrieve the token\r\n//             const editRoomResponse = await axios.put(`http://localhost:8080/api/v1/rooms/${editedRoomId}`, {\r\n//                 label: newRoomLabel,\r\n//                 createdBy: { id: currentUser.id, username: currentUser.username },\r\n//                 isPrivate: newRoomPrivacy === 'private',\r\n//             }, {\r\n//                 headers: {\r\n//                     Authorization: `Bearer ${token}`, // Add the token to the headers\r\n//                 },\r\n//             });\r\n//             if (editRoomResponse.status === 200) {\r\n//                 const updatedRooms = chatRooms.map(room =>\r\n//                     room.id === editedRoomId ? editRoomResponse.data : room\r\n//                 );\r\n//                 setChatRooms(updatedRooms);\r\n//                 setShowCreateRoomForm(false);\r\n//                 setIsEditing(false);\r\n//                 setNewRoomLabel('');\r\n//                 setNewRoomPrivacy('public');\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Error editing room:', error);\r\n//         }\r\n//     };\r\n\r\n//     const handleDeleteRoom = async (roomId) => {\r\n//         try {\r\n//             const token = localStorage.getItem('token'); // Retrieve the token\r\n//             await axios.delete(`http://localhost:8080/api/v1/rooms/${roomId}`, {\r\n//                 headers: {\r\n//                     Authorization: `Bearer ${token}`, // Add the token to the headers\r\n//                 },\r\n//             });\r\n//             setChatRooms(chatRooms.filter(room => room.id !== roomId));\r\n//         } catch (error) {\r\n//             console.error('Error deleting room:', error);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"chat-container\">\r\n//             <div className=\"chat-room-selector\">\r\n//                 <div className=\"user-info\">\r\n//                     <h2>{currentUser.username}</h2>\r\n//                     <button className=\"btn btn-danger\" onClick={handleLogout}>Logout</button>\r\n//                 </div>\r\n//                 <h2>Rooms</h2>\r\n//                 <div className=\"chat-room-list\">\r\n//                 {chatRooms.map((room) => (\r\n//                     <div key={room.id} onClick={() => handleJoinRoom(room)} className=\"chat-room\">\r\n//                         <span>{room.label}</span>\r\n//                         {room.createdBy && room.createdBy.id === currentUser.id && (\r\n//                         <div className=\"room-management\" onClick={(e) => e.stopPropagation()}>\r\n//                             <button className=\"manage-button\">â‹®</button>\r\n//                             <div className=\"management-options\">\r\n//                             <button onClick={(e) => { e.stopPropagation(); handleEditRoom(room); }}>Edit</button>\r\n//                             <button onClick={(e) => { e.stopPropagation(); handleDeleteRoom(room.id); }}>Delete</button>\r\n//                             </div>\r\n//                         </div>\r\n//                         )}\r\n//                     </div>\r\n//                     ))}\r\n//                     <div>\r\n//                         <button className=\"create-room\" onClick={() => setShowCreateRoomForm(true)}>Create New Room</button>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//             <div className=\"chat-room-display\">\r\n//                 {selectedRoom ? (\r\n//                     <ChatRoom currentUser={currentUser} selectedRoom={selectedRoom} onLogout={handleLogout} onLeave={handleLeave}/>\r\n//                 ) : (\r\n//                     <div className=\"chat-area\">\r\n//                         <h3>Select a room to start chatting.</h3>\r\n//                     </div>\r\n//                 )}\r\n//             </div>\r\n\r\n//             {showCreateRoomForm && (\r\n//                 <div className=\"create-room-popup\">\r\n//                     <div className=\"create-room-form\">\r\n//                         <h3>{isEditing ? 'Edit Room' : 'Create a New Room'}</h3>\r\n//                         <label>Room Label:</label>\r\n//                         <input\r\n//                             type=\"text\"\r\n//                             value={newRoomLabel}\r\n//                             onChange={(e) => setNewRoomLabel(e.target.value)}\r\n//                         />\r\n//                         <label>Privacy:</label>\r\n//                         <select\r\n//                             value={newRoomPrivacy}\r\n//                             onChange={(e) => setNewRoomPrivacy(e.target.value)}\r\n//                         >\r\n//                             <option value=\"public\">Public</option>\r\n//                             <option value=\"private\">Private</option>\r\n//                         </select>\r\n//                         <div className=\"form-buttons\">\r\n//                             <button onClick={isEditing ? handleSaveEditedRoom : handleCreateRoom}>\r\n//                                 {isEditing ? 'Save' : 'Create'}\r\n//                             </button>\r\n//                             <button onClick={() => {\r\n//                                 setShowCreateRoomForm(false);\r\n//                                 setIsEditing(false);\r\n//                                 setNewRoomLabel('');\r\n//                                 setNewRoomPrivacy('public');\r\n//                             }}>Cancel</button>\r\n//                         </div>\r\n//                     </div>\r\n//                 </div>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default ChatRoomSelector;\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './room.css';\r\nimport ChatRoom from './ChatRoom';\r\nimport './chatroom.css';\r\n\r\nconst ChatRoomSelector = () => {\r\n    const [currentUser, setCurrentUser] = useState(null);\r\n    const [chatRooms, setChatRooms] = useState([]);\r\n    const [selectedRoom, setSelectedRoom] = useState(null);\r\n    const [showCreateRoomForm, setShowCreateRoomForm] = useState(false);\r\n    const [newRoomLabel, setNewRoomLabel] = useState('');\r\n    const [newRoomPrivacy, setNewRoomPrivacy] = useState('public');\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [editedRoomId, setEditedRoomId] = useState(null);\r\n\r\n    // Fetch currentUser from localStorage\r\n    useEffect(() => {\r\n        const storedUser = localStorage.getItem('currentUser');\r\n        if (storedUser) {\r\n            setCurrentUser(JSON.parse(storedUser));\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchChatRooms = async () => {\r\n            try {\r\n                const token = localStorage.getItem('token'); // Retrieve the token\r\n                const response = await axios.get('http://localhost:8080/api/v1/rooms', {\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`,  // Add the token to the headers\r\n                    },\r\n                });\r\n                setChatRooms(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching chat rooms:', error);\r\n            }\r\n        };\r\n        fetchChatRooms();\r\n    }, []);\r\n\r\n    const markUserAsInactive = async (roomId) => {\r\n        try {\r\n            const token = localStorage.getItem('token'); // Retrieve the token\r\n            await axios.put(`http://localhost:8080/join/${currentUser.id}/${roomId}`, {}, {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`, // Add the token to the headers\r\n                },\r\n            });\r\n        } catch (error) {\r\n            console.error('Error marking user as inactive:', error);\r\n        }\r\n    };\r\n\r\n    const handleJoinRoom = async (room) => {\r\n        if (selectedRoom) {\r\n            await markUserAsInactive(selectedRoom.id);\r\n        }\r\n\r\n        try {\r\n            const token = localStorage.getItem('token'); // Retrieve the token\r\n            const joinResponse = await axios.post('http://localhost:8080/join', {\r\n                userId: currentUser.id,\r\n                roomId: room.id,\r\n            }, {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`, // Add the token to the headers\r\n                },\r\n            });\r\n\r\n            if (joinResponse.status === 200) {\r\n                selectedRoom(room);\r\n                localStorage.setItem('room', JSON.stringify(room)); \r\n            } else {\r\n                console.error('Failed to join the room');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error joining room:', error);\r\n        }\r\n    };\r\n\r\n    const handleLeave = async () => {\r\n        setSelectedRoom(null);\r\n        if (selectedRoom) {\r\n            await markUserAsInactive(selectedRoom.id);\r\n        }  \r\n    };\r\n\r\n    const handleLogout = async () => {\r\n        if (selectedRoom) {\r\n            await markUserAsInactive(selectedRoom.id);\r\n        }\r\n        setSelectedRoom(null);\r\n        localStorage.removeItem('currentUser');\r\n        localStorage.removeItem('token'); // Remove the token on logout\r\n        window.location.reload();\r\n    };\r\n\r\n    const handleCreateRoom = async () => {\r\n        try {\r\n            const token = localStorage.getItem('token'); // Retrieve the token\r\n            const createRoomResponse = await axios.post('http://localhost:8080/api/v1/rooms/create', {\r\n                label: newRoomLabel,\r\n                createdBy: { id: currentUser.id, username: currentUser.username },\r\n                isPrivate: newRoomPrivacy === 'private',\r\n            }, {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`, // Add the token to the headers\r\n                },\r\n            });\r\n            if (createRoomResponse.status === 201) {\r\n                setChatRooms([...chatRooms, createRoomResponse.data]);\r\n                setShowCreateRoomForm(false);\r\n                setNewRoomLabel('');\r\n                setNewRoomPrivacy('public');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error creating room:', error);\r\n        }\r\n    };\r\n\r\n    const handleEditRoom = (room) => {\r\n        setIsEditing(true);\r\n        setEditedRoomId(room.id);\r\n        setNewRoomLabel(room.label);\r\n        setNewRoomPrivacy(room.isPrivate ? 'private' : 'public');\r\n        setShowCreateRoomForm(true);\r\n    };\r\n\r\n    const handleSaveEditedRoom = async () => {\r\n        try {\r\n            const token = localStorage.getItem('token'); // Retrieve the token\r\n            const editRoomResponse = await axios.put(`http://localhost:8080/api/v1/rooms/${editedRoomId}`, {\r\n                label: newRoomLabel,\r\n                createdBy: { id: currentUser.id, username: currentUser.username },\r\n                isPrivate: newRoomPrivacy === 'private',\r\n            }, {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`, // Add the token to the headers\r\n                },\r\n            });\r\n            if (editRoomResponse.status === 200) {\r\n                const updatedRooms = chatRooms.map(room =>\r\n                    room.id === editedRoomId ? editRoomResponse.data : room\r\n                );\r\n                setChatRooms(updatedRooms);\r\n                setShowCreateRoomForm(false);\r\n                setIsEditing(false);\r\n                setNewRoomLabel('');\r\n                setNewRoomPrivacy('public');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error editing room:', error);\r\n        }\r\n    };\r\n\r\n    const handleDeleteRoom = async (roomId) => {\r\n        try {\r\n            const token = localStorage.getItem('token'); // Retrieve the token\r\n            await axios.delete(`http://localhost:8080/api/v1/rooms/${roomId}`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`, // Add the token to the headers\r\n                },\r\n            });\r\n            setChatRooms(chatRooms.filter(room => room.id !== roomId));\r\n        } catch (error) {\r\n            console.error('Error deleting room:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <div className=\"chat-room-selector\">\r\n                <div className=\"user-info\">\r\n                    <h2>{currentUser?.username}</h2>\r\n                    <button className=\"btn btn-danger\" onClick={handleLogout}>Logout</button>\r\n                </div>\r\n                <h2>Rooms</h2>\r\n                <div className=\"chat-room-list\">\r\n                    {chatRooms.map((room) => (\r\n                        <div key={room.id} onClick={() => handleJoinRoom(room)} className=\"chat-room\">\r\n                            <span>{room.label}</span>\r\n                            {room.createdBy && room.createdBy.id === currentUser?.id && (\r\n                                <div className=\"room-management\" onClick={(e) => e.stopPropagation()}>\r\n                                    <button className=\"manage-button\">â‹®</button>\r\n                                    <div className=\"management-options\">\r\n                                        <button onClick={(e) => { e.stopPropagation(); handleEditRoom(room); }}>Edit</button>\r\n                                        <button onClick={(e) => { e.stopPropagation(); handleDeleteRoom(room.id); }}>Delete</button>\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    ))}\r\n                    <div>\r\n                        <button className=\"create-room\" onClick={() => setShowCreateRoomForm(true)}>Create New Room</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"chat-room-display\">\r\n                {selectedRoom ? (\r\n                    <ChatRoom currentUser={currentUser} selectedRoom={selectedRoom} onLogout={handleLogout} onLeave={handleLeave} />\r\n                ) : (\r\n                    <div className=\"chat-area\">\r\n                        <h3>Select a room to start chatting.</h3>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {showCreateRoomForm && (\r\n                <div className=\"create-room-popup\">\r\n                    <div className=\"create-room-form\">\r\n                        <h3>{isEditing ? 'Edit Room' : 'Create a New Room'}</h3>\r\n                        <label>Room Label:</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={newRoomLabel}\r\n                            onChange={(e) => setNewRoomLabel(e.target.value)}\r\n                        />\r\n                        <label>Privacy:</label>\r\n                        <select\r\n                            value={newRoomPrivacy}\r\n                            onChange={(e) => setNewRoomPrivacy(e.target.value)}\r\n                        >\r\n                            <option value=\"public\">Public</option>\r\n                            <option value=\"private\">Private</option>\r\n                        </select>\r\n                        <div className=\"form-buttons\">\r\n                            <button onClick={isEditing ? handleSaveEditedRoom : handleCreateRoom}>\r\n                                {isEditing ? 'Save' : 'Create'}\r\n                            </button>\r\n                            <button onClick={() => {\r\n                                setShowCreateRoomForm(false);\r\n                                setIsEditing(false);\r\n                                setNewRoomLabel('');\r\n                                setNewRoomPrivacy('public');\r\n                            }}>Cancel</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatRoomSelector;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}