{"ast":null,"code":"var _jsxFileName = \"D:\\\\sic\\\\sic_front\\\\src\\\\component\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef } from 'react';\n// import axios from 'axios';\n// import Pusher from 'pusher-js';\n// import './chatroom.css';\n// import './ViewerPopup.css'; // Import the CSS for the viewer popup\n// import ViewerPopup from './popup'; // Import the viewer popup component\n\n// import profileImage from './profile.png';\n// import seenIcon from './double-check.png'; // Add a suitable seen icon image for seen messages\n// import multipleSeenIcon from './icons8-select-24.png'; // Add a suitable icon for multiple viewers\n\n// const ChatRoom = ({ currentUser, selectedRoom, onLogout, onleave }) => {\n//     const [message, setMessage] = useState('');\n//     const [messages, setMessages] = useState([]);\n//     const [unseenMessageIds, setUnseenMessageIds] = useState([]);\n//     const [viewers, setViewers] = useState({}); // Store viewers for each message\n//     const [showViewerPopup, setShowViewerPopup] = useState(null); // State to manage visible viewer list\n//     const chatAreaRef = useRef(null);\n//     const endOfMessagesRef = useRef(null); // A ref to track the bottom of the messages\n\n//     const scrollToBottom = () => {\n//         if (endOfMessagesRef.current) {\n//             endOfMessagesRef.current.scrollIntoView({ behavior: 'smooth' });\n//         }\n//     };\n\n//     const scrollToUnseenMessage = (unseenMessages) => {\n//         if (unseenMessages.length > 0) {\n//             const firstUnseenMessageId = unseenMessages[0].id;\n//             const unseenMessageElement = document.getElementById(`message-${firstUnseenMessageId}`);\n//             if (unseenMessageElement) {\n//                 unseenMessageElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n//             }\n//         }\n//     };\n\n//     const fetchMessages = async () => {\n//         try {\n//             const response = await axios.get(`http://localhost:8080/message/${selectedRoom.id}`);\n//             setMessages(response.data);\n\n//             const unseenResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/unseenMessages`);\n//             const unseenMessages = unseenResponse.data;\n\n//             if (unseenMessages.length > 0) {\n//                 setUnseenMessageIds(unseenMessages.map(msg => msg.id));\n//                 await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`, unseenMessages.map(msg => msg.id), { headers: { 'Content-Type': 'application/json' } });\n//                 scrollToUnseenMessage(unseenMessages);\n//             }\n\n//             // Fetch viewers for each message\n//             response.data.forEach(async (msg) => {\n//                 const viewersResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${msg.id}/${currentUser.id}/viewers`);\n//                 setViewers(prevViewers => ({\n//                     ...prevViewers,\n//                     [msg.id]: viewersResponse.data\n//                 }));\n//             });\n\n//             // Scroll to bottom after initial fetch\n//             scrollToBottom();\n//         } catch (error) {\n//             console.error('Error fetching messages:', error);\n//         }\n//     };\n\n//     const markMessageAsSeen = async (messageId) => {\n//         try {\n//             await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`, [messageId], { headers: { 'Content-Type': 'application/json' } });\n//         } catch (error) {\n//             console.error('Error marking message as seen:', error);\n//         }\n//     };\n\n//     useEffect(() => {\n//         if (selectedRoom?.id) {\n//             fetchMessages();\n//             const pusher = new Pusher('92044f12c78ba7ccbfdd', { cluster: 'eu',\n//                 encrypted: true\n//              });\n\n//              const channel = pusher.subscribe(`room-${selectedRoom.id}`);\n//              channel.bind('pusher:subscription_succeeded', () => {\n//                 console.log('Successfully subscribed to channel:', `room-${selectedRoom.id}`);\n//             });\n\n// // Debugging: Log any event coming through the channel\n// channel.bind('new-message', (data) => {\n//     console.log('New message event received:', data);\n//     // Handle the event\n//     setMessages((prevMessages) => [...prevMessages, data]);\n// });\n\n//             // const channel = pusher.subscribe(`room-${selectedRoom.id}`);\n//             // console.log(channel);\n//             //  channel.bind('new-message', async (data) => {\n//             //     console.log('Raw message received from Pusher:', data); // Log raw data\n//             //     let newMessage;\n//             //     try {\n//             //         newMessage = typeof data === 'string' ? JSON.parse(data) : data;\n//             //         console.log('Parsed new message:', newMessage); // Log the parsed message\n//             //     } catch (error) {\n//             //         console.error('Failed to parse message:', error); // Log parsing errors\n//             //         return; // Exit if parsing fails\n//             //     }\n\n//             //     setMessages((prevMessages) => [...prevMessages, newMessage]);\n\n//             //     await markMessageAsSeen(newMessage.id);\n\n//             //     try {\n//             //         const viewersResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${newMessage.id}/${currentUser.id}/viewers`);\n//             //         setViewers(prevViewers => ({\n//             //             ...prevViewers,\n//             //             [newMessage.id]: viewersResponse.data\n//             //         }));\n//             //     } catch (error) {\n//             //         console.error('Error fetching viewers for new message:', error);\n//             //     }\n\n//             //     scrollToBottom();\n//             // });\n\n//             channel.bind('message-seen', (seenData) => {\n//                 console.log(\"yee\");\n//                 const { messageId, viewers } = seenData;\n//                 setViewers(prevViewers => ({\n//                     ...prevViewers,\n//                     [messageId]: viewers // Update the viewers list for the message that was seen\n//                 }));\n//             });\n\n//             return () => {\n//                 pusher.unsubscribe(`room-${selectedRoom.id}`);\n//             };\n//         }\n//     }, [selectedRoom?.id]);\n\n//     const handleLeaveRoom = async () => {\n//         try {\n//             // Update user's active status to leave the room\n//             await axios.put(`http://localhost:8080/join/${currentUser.id}/${selectedRoom.id}`, { isActive: false });\n//             onleave(); // Invoke the onLogout function to return to room selector\n//         } catch (error) {\n//             console.error('Error leaving room:', error);\n//         }\n//     };\n\n//     const sendMessage = async (e) => {\n//         e.preventDefault();\n//         if (message.trim()) {\n//             const newMessage = {\n//                 message: message,\n//                 user: { id: currentUser.id, username: currentUser.username },\n//                 room: { id: selectedRoom.id, label: selectedRoom.label }\n//             };\n\n//             try {\n//                 await axios.post('http://localhost:8080/message', newMessage);\n//                 console.log('Message sent:', newMessage); // Log the sent message\n//                 setMessage(''); // Clear input after sending\n//             } catch (error) {\n//                 console.error('Error sending message:', error);\n//             }\n//         }\n//     };\n\n//     const toggleViewerPopup = (messageId) => {\n//         if (showViewerPopup === messageId) {\n//             setShowViewerPopup(null); // Hide viewer list\n//         } else {\n//             setShowViewerPopup(messageId); // Show viewer list\n//         }\n//     };\n\n//     return (\n//         <div className=\"chatroom-container\">\n//             <nav className=\"navbar\">\n//                 <span>\n//                     <img src={profileImage} alt=\"Avatar\" className=\"avatar\" />\n//                 </span>\n//                 <span className=\"navbar-user\"> {currentUser.username}</span>\n//                 <button className=\"leave-room-btn\" onClick={handleLeaveRoom}>Leave Room</button>\n//             </nav>\n\n//             <div className=\"chat-area\" ref={chatAreaRef}>\n//                 <h3>{selectedRoom.label}</h3>\n//                 <div className=\"message-list\">\n//                     {messages.map((msg) => (\n//                         <div key={msg.id} id={`message-${msg.id}`} className={`message ${msg.user?.id === currentUser?.id ? 'sent' : 'received'}`}>\n//                             <img src={profileImage} alt=\"Avatar\" className=\"avatar\" />\n//                             <div className=\"message-content\">\n//                                 <strong>{msg.user ? msg.user.username : 'Unknown User'}:</strong>\n//                                 <br></br>\n//                                 {msg.message || ''}\n//                             </div>\n\n//                             {msg.user.id === currentUser.id && (\n//                                 <div className=\"message-viewers\" onClick={() => toggleViewerPopup(msg.id)}>\n//                                     {viewers[msg.id]?.length === 0 && (\n//                                         <img src={multipleSeenIcon} alt=\"Not viewed\" className=\"viewer-icon\" title=\"Not viewed\" />\n//                                     )}\n//                                     {viewers[msg.id]?.length >= 1 && (\n//                                         <img src={seenIcon} alt=\"Seen by one\" className=\"viewer-icon\" title=\"Seen by at least one\" />\n//                                     )}\n//                                 </div>\n//                             )}\n//                         </div>\n//                     ))}\n//                     <div ref={endOfMessagesRef}></div> {/* Marker for the end of messages */}\n//                 </div>\n\n//                 <form onSubmit={sendMessage} className=\"message-form\">\n//                     <input\n//                         type=\"text\"\n//                         className=\"message-input\"\n//                         value={message}\n//                         onChange={(e) => setMessage(e.target.value)}\n//                         placeholder=\"Type a message...\"\n//                     />\n//                     <button type=\"submit\" className=\"send-btn\">Send</button>\n//                 </form>\n//             </div>\n\n//             {showViewerPopup && viewers[showViewerPopup] && (\n//                 <ViewerPopup\n//                     viewers={viewers[showViewerPopup]}\n//                     onClose={() => setShowViewerPopup(null)}\n//                 />\n//             )}\n//         </div>\n//     );\n// };\n\n// export default ChatRoom;\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport Pusher from 'pusher-js';\nimport './chatroom.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoom = ({\n  currentUser,\n  selectedRoom,\n  onLogout\n}) => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [unseenMessageIds, setUnseenMessageIds] = useState([]);\n  const chatAreaRef = useRef(null);\n\n  // Scroll to the first unseen message if any\n  const scrollToUnseenMessage = unseenMessages => {\n    if (unseenMessages.length > 0) {\n      const firstUnseenMessageId = unseenMessages[0].id;\n      const unseenMessageElement = document.getElementById(`message-${firstUnseenMessageId}`);\n      if (unseenMessageElement) {\n        unseenMessageElement.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center'\n        });\n      }\n    }\n  };\n\n  // Fetch messages and unseen messages for the current user\n  const fetchMessages = async () => {\n    try {\n      // Fetch all messages in the room\n      const response = await axios.get(`http://localhost:8080/message/${selectedRoom.id}`);\n      setMessages(response.data);\n\n      // Fetch unseen messages for the current user in the room\n      const unseenResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/unseenMessages`);\n      const unseenMessages = unseenResponse.data;\n      if (unseenMessages.length > 0) {\n        // Set unseen message IDs\n        setUnseenMessageIds(unseenMessages.map(msg => msg.id));\n\n        // Mark all unseen messages as seen in the database\n        await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`, unseenMessages.map(msg => msg.id), {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        // Scroll to the first unseen message\n        scrollToUnseenMessage(unseenMessages);\n      }\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n\n  // Mark a single message as seen when a new message arrives or is sent\n  const markMessageAsSeen = async messageId => {\n    try {\n      await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`, [messageId], {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    } catch (error) {\n      console.error('Error marking message as seen:', error);\n    }\n  };\n\n  // useEffect for fetching messages when the room is selected\n  useEffect(() => {\n    if (selectedRoom !== null && selectedRoom !== void 0 && selectedRoom.id) {\n      fetchMessages();\n      const pusher = new Pusher('92044f12c78ba7ccbfdd', {\n        cluster: 'eu'\n      });\n      const channel = pusher.subscribe(`room-${selectedRoom.id}`);\n      channel.bind('new-message', newMessage => {\n        setMessages(prevMessages => [...prevMessages, newMessage]);\n\n        // Scroll to the new message if it's unseen and mark as seen\n        markMessageAsSeen(newMessage.id);\n      });\n      return () => {\n        pusher.unsubscribe(`room-${selectedRoom.id}`);\n      };\n    }\n  }, [selectedRoom === null || selectedRoom === void 0 ? void 0 : selectedRoom.id]);\n\n  // Handle logout\n  const handleLogout = async () => {\n    try {\n      await axios.put(`http://localhost:8080/join/${currentUser.id}/${selectedRoom.id}`, {\n        isActive: false\n      });\n      onLogout();\n    } catch (error) {\n      console.error('Error updating join status:', error);\n    }\n  };\n\n  // Handle sending a new message\n  const sendMessage = async e => {\n    e.preventDefault();\n    if (message.trim()) {\n      try {\n        const newMessage = {\n          message: message,\n          user: {\n            id: currentUser.id,\n            username: currentUser.username\n          },\n          room: {\n            id: selectedRoom.id,\n            label: selectedRoom.label\n          }\n        };\n        const response = await axios.post('http://localhost:8080/message', newMessage);\n        const savedMessage = response.data;\n        setMessage('');\n\n        // Mark this message as seen right after sending it\n        markMessageAsSeen(savedMessage.id);\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatroom-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"navbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"navbar-user\",\n        children: [\"Logged in as: \", currentUser.username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"logout-btn\",\n        onClick: handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-area\",\n      ref: chatAreaRef,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Chatting in: \", selectedRoom.label]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-list\",\n        children: messages.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n          id: `message-${msg.id}`,\n          className: `message ${unseenMessageIds.includes(msg.id) ? 'unseen-message' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [msg.user ? msg.user.username : 'Unknown User', \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 29\n          }, this), \" \", msg.message || '']\n        }, msg.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: sendMessage,\n        className: \"message-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"message-input\",\n          value: message,\n          onChange: e => setMessage(e.target.value),\n          placeholder: \"Type a message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"send-btn\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 368,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatRoom, \"a0uZTnnB0cQWI1C71E+gqF6qAPA=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","Pusher","jsxDEV","_jsxDEV","ChatRoom","currentUser","selectedRoom","onLogout","_s","message","setMessage","messages","setMessages","unseenMessageIds","setUnseenMessageIds","chatAreaRef","scrollToUnseenMessage","unseenMessages","length","firstUnseenMessageId","id","unseenMessageElement","document","getElementById","scrollIntoView","behavior","block","fetchMessages","response","get","data","unseenResponse","map","msg","post","headers","error","console","markMessageAsSeen","messageId","pusher","cluster","channel","subscribe","bind","newMessage","prevMessages","unsubscribe","handleLogout","put","isActive","sendMessage","e","preventDefault","trim","user","username","room","label","savedMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","includes","onSubmit","type","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["D:/sic/sic_front/src/component/ChatRoom.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\r\n// import axios from 'axios';\r\n// import Pusher from 'pusher-js';\r\n// import './chatroom.css';\r\n// import './ViewerPopup.css'; // Import the CSS for the viewer popup\r\n// import ViewerPopup from './popup'; // Import the viewer popup component\r\n\r\n// import profileImage from './profile.png';\r\n// import seenIcon from './double-check.png'; // Add a suitable seen icon image for seen messages\r\n// import multipleSeenIcon from './icons8-select-24.png'; // Add a suitable icon for multiple viewers\r\n\r\n// const ChatRoom = ({ currentUser, selectedRoom, onLogout, onleave }) => {\r\n//     const [message, setMessage] = useState('');\r\n//     const [messages, setMessages] = useState([]);\r\n//     const [unseenMessageIds, setUnseenMessageIds] = useState([]);\r\n//     const [viewers, setViewers] = useState({}); // Store viewers for each message\r\n//     const [showViewerPopup, setShowViewerPopup] = useState(null); // State to manage visible viewer list\r\n//     const chatAreaRef = useRef(null);\r\n//     const endOfMessagesRef = useRef(null); // A ref to track the bottom of the messages\r\n\r\n//     const scrollToBottom = () => {\r\n//         if (endOfMessagesRef.current) {\r\n//             endOfMessagesRef.current.scrollIntoView({ behavior: 'smooth' });\r\n//         }\r\n//     };\r\n\r\n//     const scrollToUnseenMessage = (unseenMessages) => {\r\n//         if (unseenMessages.length > 0) {\r\n//             const firstUnseenMessageId = unseenMessages[0].id;\r\n//             const unseenMessageElement = document.getElementById(`message-${firstUnseenMessageId}`);\r\n//             if (unseenMessageElement) {\r\n//                 unseenMessageElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     const fetchMessages = async () => {\r\n//         try {\r\n//             const response = await axios.get(`http://localhost:8080/message/${selectedRoom.id}`);\r\n//             setMessages(response.data);\r\n\r\n//             const unseenResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/unseenMessages`);\r\n//             const unseenMessages = unseenResponse.data;\r\n\r\n//             if (unseenMessages.length > 0) {\r\n//                 setUnseenMessageIds(unseenMessages.map(msg => msg.id));\r\n//                 await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`, unseenMessages.map(msg => msg.id), { headers: { 'Content-Type': 'application/json' } });\r\n//                 scrollToUnseenMessage(unseenMessages);\r\n//             }\r\n\r\n//             // Fetch viewers for each message\r\n//             response.data.forEach(async (msg) => {\r\n//                 const viewersResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${msg.id}/${currentUser.id}/viewers`);\r\n//                 setViewers(prevViewers => ({\r\n//                     ...prevViewers,\r\n//                     [msg.id]: viewersResponse.data\r\n//                 }));\r\n//             });\r\n\r\n//             // Scroll to bottom after initial fetch\r\n//             scrollToBottom();\r\n//         } catch (error) {\r\n//             console.error('Error fetching messages:', error);\r\n//         }\r\n//     };\r\n\r\n//     const markMessageAsSeen = async (messageId) => {\r\n//         try {\r\n//             await axios.post(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`, [messageId], { headers: { 'Content-Type': 'application/json' } });\r\n//         } catch (error) {\r\n//             console.error('Error marking message as seen:', error);\r\n//         }\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         if (selectedRoom?.id) {\r\n//             fetchMessages();\r\n//             const pusher = new Pusher('92044f12c78ba7ccbfdd', { cluster: 'eu',\r\n//                 encrypted: true\r\n//              });\r\n\r\n\r\n//              const channel = pusher.subscribe(`room-${selectedRoom.id}`);\r\n//              channel.bind('pusher:subscription_succeeded', () => {\r\n//                 console.log('Successfully subscribed to channel:', `room-${selectedRoom.id}`);\r\n//             });\r\n\r\n// // Debugging: Log any event coming through the channel\r\n// channel.bind('new-message', (data) => {\r\n//     console.log('New message event received:', data);\r\n//     // Handle the event\r\n//     setMessages((prevMessages) => [...prevMessages, data]);\r\n// });\r\n\r\n\r\n//             // const channel = pusher.subscribe(`room-${selectedRoom.id}`);\r\n//             // console.log(channel);\r\n//             //  channel.bind('new-message', async (data) => {\r\n//             //     console.log('Raw message received from Pusher:', data); // Log raw data\r\n//             //     let newMessage;\r\n//             //     try {\r\n//             //         newMessage = typeof data === 'string' ? JSON.parse(data) : data;\r\n//             //         console.log('Parsed new message:', newMessage); // Log the parsed message\r\n//             //     } catch (error) {\r\n//             //         console.error('Failed to parse message:', error); // Log parsing errors\r\n//             //         return; // Exit if parsing fails\r\n//             //     }\r\n            \r\n//             //     setMessages((prevMessages) => [...prevMessages, newMessage]);\r\n            \r\n//             //     await markMessageAsSeen(newMessage.id);\r\n                \r\n//             //     try {\r\n//             //         const viewersResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${newMessage.id}/${currentUser.id}/viewers`);\r\n//             //         setViewers(prevViewers => ({\r\n//             //             ...prevViewers,\r\n//             //             [newMessage.id]: viewersResponse.data\r\n//             //         }));\r\n//             //     } catch (error) {\r\n//             //         console.error('Error fetching viewers for new message:', error);\r\n//             //     }\r\n            \r\n//             //     scrollToBottom();\r\n//             // });\r\n            \r\n\r\n            \r\n            \r\n            \r\n\r\n//             channel.bind('message-seen', (seenData) => {\r\n//                 console.log(\"yee\");\r\n//                 const { messageId, viewers } = seenData;\r\n//                 setViewers(prevViewers => ({\r\n//                     ...prevViewers,\r\n//                     [messageId]: viewers // Update the viewers list for the message that was seen\r\n//                 }));\r\n//             });\r\n\r\n//             return () => {\r\n//                 pusher.unsubscribe(`room-${selectedRoom.id}`);\r\n//             };\r\n//         }\r\n//     }, [selectedRoom?.id]);\r\n\r\n//     const handleLeaveRoom = async () => {\r\n//         try {\r\n//             // Update user's active status to leave the room\r\n//             await axios.put(`http://localhost:8080/join/${currentUser.id}/${selectedRoom.id}`, { isActive: false });\r\n//             onleave(); // Invoke the onLogout function to return to room selector\r\n//         } catch (error) {\r\n//             console.error('Error leaving room:', error);\r\n//         }\r\n//     };\r\n\r\n//     const sendMessage = async (e) => {\r\n//         e.preventDefault();\r\n//         if (message.trim()) {\r\n//             const newMessage = {\r\n//                 message: message,\r\n//                 user: { id: currentUser.id, username: currentUser.username },\r\n//                 room: { id: selectedRoom.id, label: selectedRoom.label }\r\n//             };\r\n    \r\n//             try {\r\n//                 await axios.post('http://localhost:8080/message', newMessage);\r\n//                 console.log('Message sent:', newMessage); // Log the sent message\r\n//                 setMessage(''); // Clear input after sending\r\n//             } catch (error) {\r\n//                 console.error('Error sending message:', error);\r\n//             }\r\n//         }\r\n//     };\r\n    \r\n\r\n//     const toggleViewerPopup = (messageId) => {\r\n//         if (showViewerPopup === messageId) {\r\n//             setShowViewerPopup(null); // Hide viewer list\r\n//         } else {\r\n//             setShowViewerPopup(messageId); // Show viewer list\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"chatroom-container\">\r\n//             <nav className=\"navbar\">\r\n//                 <span>\r\n//                     <img src={profileImage} alt=\"Avatar\" className=\"avatar\" />\r\n//                 </span>\r\n//                 <span className=\"navbar-user\"> {currentUser.username}</span>\r\n//                 <button className=\"leave-room-btn\" onClick={handleLeaveRoom}>Leave Room</button>\r\n//             </nav>\r\n\r\n//             <div className=\"chat-area\" ref={chatAreaRef}>\r\n//                 <h3>{selectedRoom.label}</h3>\r\n//                 <div className=\"message-list\">\r\n//                     {messages.map((msg) => (\r\n//                         <div key={msg.id} id={`message-${msg.id}`} className={`message ${msg.user?.id === currentUser?.id ? 'sent' : 'received'}`}>\r\n//                             <img src={profileImage} alt=\"Avatar\" className=\"avatar\" />\r\n//                             <div className=\"message-content\">\r\n//                                 <strong>{msg.user ? msg.user.username : 'Unknown User'}:</strong>\r\n//                                 <br></br>\r\n//                                 {msg.message || ''}\r\n//                             </div>\r\n\r\n//                             {msg.user.id === currentUser.id && (\r\n//                                 <div className=\"message-viewers\" onClick={() => toggleViewerPopup(msg.id)}>\r\n//                                     {viewers[msg.id]?.length === 0 && (\r\n//                                         <img src={multipleSeenIcon} alt=\"Not viewed\" className=\"viewer-icon\" title=\"Not viewed\" />\r\n//                                     )}\r\n//                                     {viewers[msg.id]?.length >= 1 && (\r\n//                                         <img src={seenIcon} alt=\"Seen by one\" className=\"viewer-icon\" title=\"Seen by at least one\" />\r\n//                                     )}\r\n//                                 </div>\r\n//                             )}\r\n//                         </div>\r\n//                     ))}\r\n//                     <div ref={endOfMessagesRef}></div> {/* Marker for the end of messages */}\r\n//                 </div>\r\n\r\n//                 <form onSubmit={sendMessage} className=\"message-form\">\r\n//                     <input\r\n//                         type=\"text\"\r\n//                         className=\"message-input\"\r\n//                         value={message}\r\n//                         onChange={(e) => setMessage(e.target.value)}\r\n//                         placeholder=\"Type a message...\"\r\n//                     />\r\n//                     <button type=\"submit\" className=\"send-btn\">Send</button>\r\n//                 </form>\r\n//             </div>\r\n\r\n//             {showViewerPopup && viewers[showViewerPopup] && (\r\n//                 <ViewerPopup\r\n//                     viewers={viewers[showViewerPopup]}\r\n//                     onClose={() => setShowViewerPopup(null)}\r\n//                 />\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default ChatRoom;\r\n\r\n\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport Pusher from 'pusher-js';\r\nimport './chatroom.css';\r\n\r\nconst ChatRoom = ({ currentUser, selectedRoom, onLogout }) => {\r\n    const [message, setMessage] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    const [unseenMessageIds, setUnseenMessageIds] = useState([]);\r\n    const chatAreaRef = useRef(null);\r\n\r\n    // Scroll to the first unseen message if any\r\n    const scrollToUnseenMessage = (unseenMessages) => {\r\n        if (unseenMessages.length > 0) {\r\n            const firstUnseenMessageId = unseenMessages[0].id;\r\n            const unseenMessageElement = document.getElementById(`message-${firstUnseenMessageId}`);\r\n            if (unseenMessageElement) {\r\n                unseenMessageElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n            }\r\n        }\r\n    };\r\n\r\n    // Fetch messages and unseen messages for the current user\r\n    const fetchMessages = async () => {\r\n        try {\r\n            // Fetch all messages in the room\r\n            const response = await axios.get(`http://localhost:8080/message/${selectedRoom.id}`);\r\n            setMessages(response.data);\r\n\r\n            // Fetch unseen messages for the current user in the room\r\n            const unseenResponse = await axios.get(`http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/unseenMessages`);\r\n            const unseenMessages = unseenResponse.data;\r\n\r\n            if (unseenMessages.length > 0) {\r\n                // Set unseen message IDs\r\n                setUnseenMessageIds(unseenMessages.map(msg => msg.id));\r\n\r\n                // Mark all unseen messages as seen in the database\r\n                await axios.post(\r\n                    `http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`,\r\n                    unseenMessages.map(msg => msg.id),\r\n                    { headers: { 'Content-Type': 'application/json' } }\r\n                );\r\n\r\n                // Scroll to the first unseen message\r\n                scrollToUnseenMessage(unseenMessages);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching messages:', error);\r\n        }\r\n    };\r\n\r\n    // Mark a single message as seen when a new message arrives or is sent\r\n    const markMessageAsSeen = async (messageId) => {\r\n        try {\r\n            await axios.post(\r\n                `http://localhost:8080/message/${selectedRoom.id}/${currentUser.id}/markseen`,\r\n                [messageId],\r\n                { headers: { 'Content-Type': 'application/json' } }\r\n            );\r\n        } catch (error) {\r\n            console.error('Error marking message as seen:', error);\r\n        }\r\n    };\r\n\r\n    // useEffect for fetching messages when the room is selected\r\n    useEffect(() => {\r\n        if (selectedRoom?.id) {\r\n            fetchMessages();\r\n\r\n            const pusher = new Pusher('92044f12c78ba7ccbfdd', {\r\n                cluster: 'eu'\r\n            });\r\n\r\n            const channel = pusher.subscribe(`room-${selectedRoom.id}`);\r\n            channel.bind('new-message', (newMessage) => {\r\n                setMessages((prevMessages) => [...prevMessages, newMessage]);\r\n\r\n                // Scroll to the new message if it's unseen and mark as seen\r\n                markMessageAsSeen(newMessage.id);\r\n            });\r\n\r\n            return () => {\r\n                pusher.unsubscribe(`room-${selectedRoom.id}`);\r\n            };\r\n        }\r\n    }, [selectedRoom?.id]);\r\n\r\n    // Handle logout\r\n    const handleLogout = async () => {\r\n        try {\r\n            await axios.put(`http://localhost:8080/join/${currentUser.id}/${selectedRoom.id}`, { isActive: false });\r\n            onLogout();\r\n        } catch (error) {\r\n            console.error('Error updating join status:', error);\r\n        }\r\n    };\r\n\r\n    // Handle sending a new message\r\n    const sendMessage = async (e) => {\r\n        e.preventDefault();\r\n        if (message.trim()) {\r\n            try {\r\n                const newMessage = {\r\n                    message: message,\r\n                    user: { id: currentUser.id, username: currentUser.username },\r\n                    room: { id: selectedRoom.id, label: selectedRoom.label }\r\n                };\r\n                const response = await axios.post('http://localhost:8080/message', newMessage);\r\n                const savedMessage = response.data;\r\n                setMessage('');\r\n\r\n                // Mark this message as seen right after sending it\r\n                markMessageAsSeen(savedMessage.id);\r\n            } catch (error) {\r\n                console.error('Error sending message:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chatroom-container\">\r\n            <nav className=\"navbar\">\r\n                <span className=\"navbar-user\">Logged in as: {currentUser.username}</span>\r\n                <button className=\"logout-btn\" onClick={handleLogout}>Logout</button>\r\n            </nav>\r\n\r\n            <div className=\"chat-area\" ref={chatAreaRef}>\r\n                <h3>Chatting in: {selectedRoom.label}</h3>\r\n                <div className=\"message-list\">\r\n                    {messages.map((msg) => (\r\n                        <div\r\n                            key={msg.id}\r\n                            id={`message-${msg.id}`}\r\n                            className={`message ${unseenMessageIds.includes(msg.id) ? 'unseen-message' : ''}`}>\r\n                            <strong>{msg.user ? msg.user.username : 'Unknown User'}:</strong> {msg.message || ''}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                <form onSubmit={sendMessage} className=\"message-form\">\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"message-input\"\r\n                        value={message}\r\n                        onChange={(e) => setMessage(e.target.value)}\r\n                        placeholder=\"Type a message...\"\r\n                    />\r\n                    <button type=\"submit\" className=\"send-btn\">Send</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,WAAW;AAC9B,OAAO,gBAAgB;AAAC,SAAAC,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}